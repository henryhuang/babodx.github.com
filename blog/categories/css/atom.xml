<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: CSS | 鑫的方向]]></title>
  <link href="http://babodx.github.com/blog/categories/css/atom.xml" rel="self"/>
  <link href="http://babodx.github.com/"/>
  <updated>2013-04-25T15:21:50+08:00</updated>
  <id>http://babodx.github.com/</id>
  <author>
    <name><![CDATA[babodx]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[emlog访问速度优化之minify整合css与js文件]]></title>
    <link href="http://babodx.github.com/blog/2011/11/17/emlog-optimize-via-minify/"/>
    <updated>2011-11-17T00:00:00+08:00</updated>
    <id>http://babodx.github.com/blog/2011/11/17/emlog-optimize-via-minify</id>
    <content type="html"><![CDATA[<p>我们知道网站的访问速度和很多因素相关，但是今天这里只是优化我们能力范围内的首页文件加载数量与大小。</p>

<p>如果首页文件很大，肯定加载慢。还有一个因素就是首页如果加载很多css和js文件，因为在加载过程中会建立很多次连接从而降低访问首页的速度。</p>

<p>下面是我博客默认情况下的加载css和js文件的数量</p>

<p><img src="http://farm9.staticflickr.com/8246/8515051510_535fdf1923_z.jpg" alt="请求数截图" /></p>

<p><img src="http://farm9.staticflickr.com/8087/8513940611_b373e87aea_z.jpg" alt="文件数" /></p>

<p>从图上可以看到加载了4个css文件和5个js文件。大小分别为54.2kb和45.5kb。
 
下面我们的主要工具出场：<b>minify</b></p>

<p>这个程序是纯php编写的开源程序，用来将我们网站的css和js文件进行整合与压缩。这样我们就可以通过整合css与js文件并压缩大小从而提高首页加载速度。
 
首先将minify下载，我这里采用的是minify_2.1.3版本。将下载后的min目录放到网站的根目录。
接着我们改造我们的程序，让css与js文件通过minify程序合并压缩。
 
我是自己写了一个类，我起名为merge.php用来调用minify整合。下面是类代码</p>

<p>```
&lt;?php
/<em>*
 * JS和CSS文件合并类
 *
 * @copyright (c) xinlogs.com All Rights Reserved
 * $Id: merge.php 2011-11-16 09:54:58Z  xinlogs.com$
 </em>/</p>

<p>class Merge {
  //定义两个数组用来存储全部css和js文件的位置
  static private $css_list=array();
  static private $js_list=array();
  static private $js_code=array();
  //定义addCssFile方法，用来添加css文件到数组
  static function addCssFile($addFilePath) {</p>

<pre><code>array_push(self::$css_list,$addFilePath);
</code></pre>

<p>  }
  //定义getCssList方法，用来返回css文件字符串
  static function getCssList(){</p>

<pre><code>return implode(",",self::$css_list);
</code></pre>

<p>  }
  //定义addJsFile方法，用来添加js文件到数组
  static function addJsFile($addFilePath) {</p>

<pre><code>array_push(self::$js_list,$addFilePath);
</code></pre>

<p>  }
  //定义getJsList用来返回js文件字符串
  static function getJsList(){</p>

<pre><code>return implode(",",self::$js_list);
</code></pre>

<p>  }
  //加入js代码
  static function addJsCode($addJsCode)
  {</p>

<pre><code>array_push(self::$js_code,$addJsCode);
</code></pre>

<p>  }</p>

<p>  static function includejscode(){</p>

<pre><code>return implode(" ",self::$js_code);
</code></pre>

<p>  }
  //用来返回加入CSS代码的语句
  static function includecss() {</p>

<pre><code>$css="&lt;link href=".BLOG_URL."min/?f=".Merge::getCssList()." rel=\"stylesheet\" type=\"text/css\" /&gt;";
return $css;
</code></pre>

<p>  }
  //用来返回插件js代码的语句
  static function includejs() {</p>

<pre><code>$js="&lt;script src=".BLOG_URL."min/?f=".Merge::getJsList()." type=\"text/javascript\"&gt;&lt;/script&gt;";
return $js;
</code></pre>

<p>  }
}
```</p>

<p>将merge.php放到网站include/lib目录下，emlog就会自动加载这个类了。
 
接着我们修改我们的模板与插件，让所有css与js文件通过Merge这个类来处理。</p>

<p>一般css与js文件都是在模板的header.php文件内加载的，这里以默认模板为例说明</p>

<p>我们打开header.php文件，然后修改css文件加载的语句。将原来加载css的语句，采用Merge::addcssfile方法代替</p>

<p><code>Merge::addCssFile("content/templates/default/main.css");</code></p>

<p>最后在doAction后面统一输出我们合并后的css文件。</p>

<p><code>
&lt;?php doAction('index_head'); ?&gt;
&lt;?php echo Merge::includecss();?&gt;
</code></p>

<p>我们再来处理js文件，我是将模板的js文件调整到了fooder.php里加载，下面以这个footer.php为例说明
首先将加载js文件的语句，替换为Merge::addJsFile方法</p>

<p><code>
&lt;?php Merge::addJsFile("include/lib/js/common_tpl.js");?&gt;
</code></p>

<p>然后在doAction后面再统一调用合并后的js文件</p>

<p>```
&lt;?php doAction('index_footer'); ?></p>

<p>&lt;?php echo Merge::includejs();?></p>

<p>&lt;?php echo Merge::includejscode();?>
```
 
以上只是针对模板的修改，我的这个博客还采用了高亮代码的插件，这个插件会调用一些js与css文件。所以下面我还修改这个插件的代码，使它也通过merge类来合并输出css与js。</p>

<p>这个插件主要修改drp_highlighter.php文件，在drp_highlighter_index_head方法里加入css的引入</p>

<p>```
function drp_highlighter_index_head() {</p>

<p>  Merge::addCssFile("content/plugins/drp_highlighter/css/editor.css");</p>

<p>}
```
 
在drp_highlighter_index_footer方法里加入对js文件与代码的引入。</p>

<p>```
function drp_highlighter_index_footer(){</p>

<pre><code>    include(EMLOG_ROOT.'/content/plugins/drp_highlighter/config.php');

    Merge::addJsFile("content/plugins/drp_highlighter/js/jquery.js");

    Merge::addJsFile("content/plugins/drp_highlighter/js/jquery.highlighter.src.js");

    $jscode="
</code></pre>

<script type='text/javascript'>

$(document).ready(function(){

        var option={

                dir:'".BLOG_URL."content/plugins/drp_highlighter/js/syntaxhighlighter/',

                name:'code',

                showControls:true,

                skin:'".constant('highlighter')."'

        };

        $.SyntaxHighlighter(option);

});

</script>


<p>";</p>

<pre><code>    Merge::addJsCode($jscode);
</code></pre>

<p>}
```</p>

<p>最后在文件最后面找到注册action的代码，和上面方法名修改对应上。</p>

<p>```
addAction('adm_sidebar_ext', 'drp_highlighter_adm_sidebar');</p>

<p>addAction('index_head','drp_highlighter_index_head');</p>

<p>addAction('index_footer', 'drp_highlighter_index_footer');</p>

<p>addAction('adm_writelog_head','drp_highlighter_adm_head');
```</p>

<p>下面是我整合css与js代码后的效果</p>

<p><img src="http://farm9.staticflickr.com/8088/8515066606_1e38661e7f_z.jpg" alt="整合后效果1" /></p>

<p>css文件降低为3个，其中有两个为新浪微博的代码，这个不好整合了。。。</p>

<p><img src="http://farm9.staticflickr.com/8234/8515070122_92e6aab78e_z.jpg" alt="整合后效果2" /></p>

<p>js文件数降低为3个，其中一个是微博的，一个是百度统计的。我们自己的代码已经整合到一个请求里调用了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[哀悼日网站和bo-blog变灰色设置]]></title>
    <link href="http://babodx.github.com/blog/2010/04/21/Mourning-CSS-SETUP/"/>
    <updated>2010-04-21T00:00:00+08:00</updated>
    <id>http://babodx.github.com/blog/2010/04/21/Mourning-CSS-SETUP</id>
    <content type="html"><![CDATA[<p>根据国务院文件，5.19-5.21为全国哀悼日，在此期间，全国和各驻外机构下半旗志哀，停止公共娱乐活动，外交部和我国驻外使领馆设立吊唁簿。5月19日14时28分起，全国人民默哀3分钟，届时汽车、火车、舰船鸣笛，防空警报鸣响。 Admin5与很多草根网站都将整站换成素装。并建议中国所有站点更换为素装。</p>

<p>为方便站点哀悼，特提供css滤镜代码，以表哀悼。以下为全站CSS代码。</p>

<p><code>html { filter:progid:DXImageTransform.Microsoft.BasicImage(grayscale=1); } </code></p>

<p>使用方法：这段代码可以变网页为黑白，将代码加到CSS最顶端就可以实现素装。建议全国站长动起来。为在地震中遇难的同胞哀悼。</p>

<p>如果网站没有使用CSS，可以在网页/模板的HTML代码<head>和</head> 之间插入：</p>

<p>```</p>

<pre><code>&lt;style&gt;  
html{filter:progid:DXImageTransform.Microsoft.BasicImage(grayscale=1);}   
style&gt;  
</code></pre>

<p>```</p>

<p>有一些站长的网站可能使用这个css 不能生效，是因为网站没有使用最新的网页标准协议</p>

<p><code>
 &lt;html xmlns=“http://www.w3.org/1999/xhtml”&gt;   
</code></p>

<p>请将网页最头部的<html>替换为以上代码。</p>

<p>有一些网站FLASH动画的颜色不能被CSS滤镜控制，可以在FLASH代码的<object …>和</object>之间插入：</p>

<p>```</p>

<pre><code>“false” name=“menu”/&gt;   
“opaque” name=“wmode”/&gt;  
</code></pre>

<p>```</p>

<p>最简单的把页面变成灰色的代码是在head 之间加
 
```</p>

<pre><code>&lt;style type=“text/css”&gt;  

html {   
    FILTER: gray   
}   
style&gt;  
</code></pre>

<p>```</p>

<p>下面再看看如何给上面这些应用到bo-blog的页面中呢。</p>

<p>首先我们到bo-blog的根目录找到我们的template模板目录，在其中找到我们使用的模板所采用的CSS文件。在文件最后加入</p>

<p><code>
html { filter:progid:DXImageTransform.Microsoft.BasicImage(grayscale=1); }    
</code>
另在哀悼日或遇难的新闻，所有专题和主题 图片上不能使用红色标题。</p>
]]></content>
  </entry>
  
</feed>
