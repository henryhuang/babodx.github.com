<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | 鑫的方向]]></title>
  <link href="http://babodx.github.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://babodx.github.com/"/>
  <updated>2013-04-29T11:17:17+08:00</updated>
  <id>http://babodx.github.com/</id>
  <author>
    <name><![CDATA[babodx]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[nginx支持thinkphp的pathinfo模式]]></title>
    <link href="http://babodx.github.com/blog/2013/04/25/nginxzhi-chi-thinkphpde-pathinfomo-shi/"/>
    <updated>2013-04-25T15:06:00+08:00</updated>
    <id>http://babodx.github.com/blog/2013/04/25/nginxzhi-chi-thinkphpde-pathinfomo-shi</id>
    <content type="html"><![CDATA[<p>最近帮助一个朋友迁移系统。原有系统是www.pinphp.com开发的一套淘宝客程序，跑在Win03服务器上。因为ddos攻击、性能问题等原因，找我迁移到Linux系统下。</p>

<p>首先我推荐的组合当然是现在流行的Ningx+php-fpm模式。便于优化而且效率很高。</p>

<p>部署的过程中遇到的问题就是伪静态无法生效。一些带中文的url无法正常处理等。</p>

<p>后来看代码发现pinphp这套代码是基于thinkphp框架开发。而thinkphp框架采用一种pathinfo的伪静态模式。而nginx本身是不支持pathinfo模式的，要是通过修改fastcgi 参数来支持，可以实现但是会有安全隐患。</p>

<p><strong>什么是pathinfo呢？</strong></p>

<p>因为thinkphp框架要求所有请求都要通过入口文件来转发，所以任何请求都是到index.php后才转发的。为了url好看和便于seo。就产生了pathinfo了，就是我们比如想访问index.php?s=book这样的url，可以直接访问index.php/book. 其实也可以看做是一种特殊的伪静态。index.php后面的url部分作为参数传递给index.php来处理。</p>

<p><strong>nginx要如何处理</strong></p>

<p>index.php/book 这种类型url nginx无法很好处理，而且非要通过pathinfo处理可以，但是会有安全隐患问题。</p>

<p>thinkphp文档里的解决办法是采用伪静态，把全部url转发给index.php?s=来处理。
下面就是我在nginx里的转发规则</p>

<p>```
if (!-e $request_filename)</p>

<pre><code>{
    rewrite  ^(.*)$  /index.php?s=$1  last;
    break;
}
</code></pre>

<p>```</p>

<p>这样/目录后面的url部分就当作index.php?s的参数来处理了。可以完美解决pathinfo问题。而且这样处理后，中文url也可以正常执行了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[centos5.5安装rails环境]]></title>
    <link href="http://babodx.github.com/blog/2013/04/02/centos5-dot-5an-zhuang-railshuan-jing/"/>
    <updated>2013-04-02T13:10:00+08:00</updated>
    <id>http://babodx.github.com/blog/2013/04/02/centos5-dot-5an-zhuang-railshuan-jing</id>
    <content type="html"><![CDATA[<p>最近招生需要写一个考试结果查询程序，就用rails来写了。以前一直java、php的，发现rails的高效开发以后，就打算尝试下。
程序写好后，就开始考虑服务器的问题了。我手边就只有centos的系统，也直到ubuntu和debian对于rails来说有好点。但是现实总是残酷的。。。</p>

<h2>安装EPEL</h2>

<p>因为系统为centos 5.5 所以很多现在流行的软件包都没有。所以采用epel来安装。</p>

<p><code>
wget http://dl.fedoraproject.org/pub/epel/5/i386/epel-release-5-4.noarch.rpm
rpm -ivh epel-release-5-4.noarch.rpm
</code></p>

<p>有了epel以后，就可以安装一些需要的软件包了。</p>

<h2>安装git</h2>

<p>git直接用<code>yum install git</code> 就可以顺利安装了</p>

<h2>安装rvm</h2>

<p><code>
echo insecure &gt;&gt; ~/.curlrc
curl -L get.rvm.io | bash -s stable
source ~/.bashrc
source ~/.bash_profile
rvm list
</code></p>

<h2>安装ruby</h2>

<p><code>
rvm install 1.9.3
</code>
安装的时候可能会因为系统缺少一些软件包而提示错误。根据提示安装对应软件包就可以了。
我这里是提示缺少libyaml-devel和libffi-devel俩个</p>

<p><code>
yum install libyaml-devel
yum install libffi-devel
</code>
安装完成后，设置下默认的ruby版本</p>

<p><code>
rvm use 1.9.3 --default
</code></p>

<p>有了这些，就可以直接用gem来安装rails了</p>

<h2>安装Rails</h2>

<p><code>
gem install rails
</code></p>

<h2>小结</h2>

<p>上面安装基本很顺利，就是用rvm安装ruby的时候可能会提示确认支持的软件包。根据提示安装上就可以了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[批量部署系统方案]]></title>
    <link href="http://babodx.github.com/blog/2013/01/22/installation-server/"/>
    <updated>2013-01-22T00:00:00+08:00</updated>
    <id>http://babodx.github.com/blog/2013/01/22/installation-server</id>
    <content type="html"><![CDATA[<p>最近单位一直弄刀片服务器，7个笼子，112片。安装系统是个麻烦的事情，如果单机安装，太痛苦了。
所以就尝试了批量部署系统。
 
主要是分Linux和Windows两种方案</p>

<p>我这里Linux是CentOS。 采用了cobbler来做批量部署。</p>

<p>Windows采用的是win 2008的部署服务，就是WDS来做批量部署。</p>

<p>这样Linux做一台分发服务器，Windows做一台WDS服务器，需要部署那种系统就开那台服务器就可以了。</p>

<p>所有刀片全部采用pxe来引导就可以了。
 
具体方法就先不写了，以后再补上吧
 </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[debian6.0.5(squeeze)安装配置xen-4.0虚拟化]]></title>
    <link href="http://babodx.github.com/blog/2012/08/06/debian-xen-install/"/>
    <updated>2012-08-06T00:00:00+08:00</updated>
    <id>http://babodx.github.com/blog/2012/08/06/debian-xen-install</id>
    <content type="html"><![CDATA[<h1>系统安装</h1>

<p>我是通过http://mirrors.163.com下载的     debian-6.0.5-amd64-CD-1.iso
最小安装有一张CD就可以了，安装的是debian6.0.5(squeeze) 64位版本</p>

<p>安装没啥好说的，最小化安装，除了基本系统就多选择了一个ssh server。</p>

<p>安装好系统后，进入系统首先设置网卡，不要用dhcp选择static模式
编辑/etc/network/interfaces文件如下</p>

<p>```</p>

<h1>The loopback network interfaceauto lo</h1>

<p>iface lo inet loopback</p>

<h1>The primary network interface</h1>

<h1>allow-hotplug eth0</h1>

<p>auto eth0</p>

<p>iface eth0 inet static</p>

<p>  address 192.168.1.10</p>

<p>  netmask 255.255.255.0</p>

<p>  broadcast 192.168.1.255</p>

<p>  network 192.168.1.0</p>

<p>  gateway 192.168.1.1
```</p>

<p>我这里只有一个eth0网卡，采用192.168.1.10的IP地址</p>

<p>接下来修改apt的源，采用mirrors.163.com提供的服务器，这样速度比较快
修改/etc/apt/sources.list
内容如下</p>

<p><code>
deb http://mirrors.163.com/debian/ squeeze main non-free contrib
deb http://mirrors.163.com/debian/ squeeze-proposed-updates main non-free contrib
deb-src http://mirrors.163.com/debian/ squeeze main non-free contrib
deb-src http://mirrors.163.com/debian/ squeeze-proposed-updates main non-free contrib
</code></p>

<p>执行apt-get update更新源</p>

<p>经过这些设置，系统基本就是一个干净的最小系统。并且采用163的服务器作为软件源。</p>

<h2>安装XEN-4.0</h2>

<p>下面开始安装xen-4.0的相关软件包和配置</p>

<p><code>
apt-get install xen-hypervisor-4.0-amd64 xen-linux-system-2.6.32-5-xen-amd64 xen-utils* xenwatch xen-tools
</code></p>

<p>需要下66.2M的软件包</p>

<p>安装后，再次启动选择带XEN 4.0 amd64的内核启动项</p>

<p>注意：（默认的启动项虽然带xen但是不带4.0选项，启动后不能正确启动xend）
也可以修改/etc/default/grub里面的选项，默认从这个内核启动</p>

<p>修改GRBU_DEFAULT=4</p>

<h3>配置xen的网络</h3>

<p>修改/etc/xen/xend-config.sxp文件</p>

<p>打开<code>(network-script network-bridge)</code></p>

<p>采用桥接方式</p>

<p>重启后，系统会将物理网卡修改为peth0，而eth0为桥接的网卡</p>

<p>brctl show 显示如下</p>

<p><code>
root@node1:~# brctl show
bridge name     bridge id                    STP enabled     interfaces
eth0                 8000.001c42d8fe43     no                    peth0
</code></p>

<h3>通过xen-create-image安装debian虚拟系统</h3>

<p>```
xen-create-image --hostname=vm01 --size=2G --swap=128M --ide \</p>

<p>--ip=192.168.1.21 --netmask=255.255.255.0 --gateway=192.168.1.1 \</p>

<p>--force --dir=/vm --memory=128M -arch=i386 \</p>

<p>--kernel=/boot/vmlinuz-2.6.32-5-xen-amd64 \</p>

<p>--dist=squeeze --mirror=http://mirrors.163.com/debian/ --passwd \</p>

<p>--install-method=debootstrap
```</p>

<p>安装以后，需要调整vm01.cfg文件，否则无法启动
首先调整磁盘的相关配置</p>

<p>```
root        = '/dev/xvda2 ro'
disk        = [</p>

<pre><code>              'file:/vm/domains/vm01/disk.img,xvda2,w',
              'file:/vm/domains/vm01/swap.img,xvda1,w',
          ]
</code></pre>

<p>```</p>

<p>将原来的hda2修改为xvda2</p>

<p>然后是调整网卡的相关配置</p>

<p><code>
vif         = [ 'ip=192.168.1.21,mac=00:16:3E:9B:1A:90,bridge=eth0' ]
</code></p>

<p>主要是加上bridge=eth0</p>

<p>这样就可以通过xm create vm01.cfg启动虚拟系统了</p>

<p>```
root@node1:~# xm list
Name                                        ID   Mem VCPUs      State   Time(s)
Domain-0                                   0   879     1               r-----     26.6
vm01                                         1   128     1                -b----      1.7</p>

<p>root@node1:~#<br/>
```</p>

<p>启动后，dom0下面会出现一个vif的虚拟网卡</p>

<p><code>
root@node1:~# brctl show
bridge name     bridge id                      STP enabled     interfaces
eth0                 8000.001c42d8fe43         no                      peth0
</code></p>

<pre><code>                                                                                            vif1.0 
</code></pre>

<p>如果在guest系统只能ping到dom0的eth0，而不能ping到外网
可以检查下</p>

<p>```
root@node1:~# sysctl net.ipv4.ip_forward</p>

<p>net.ipv4.ip_forward = 0
```</p>

<p>只要打开这个ip_forward就可以了</p>

<p>修改/etc/sysctl.conf里面的net.ipv4.ip_forward=1
或者
<code>echo 1&gt;/proc/sys/net/ipv4/ip_forward</code></p>

<p>也可以用命令临时生效
<code>sysctl -w net.ipv4.ip_forward=1</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nginx通过轮询避免php-fpm引起的502错误]]></title>
    <link href="http://babodx.github.com/blog/2012/08/01/Solve-nginx-502-mistakes/"/>
    <updated>2012-08-01T00:00:00+08:00</updated>
    <id>http://babodx.github.com/blog/2012/08/01/Solve-nginx-502-mistakes</id>
    <content type="html"><![CDATA[<h2>问题背景</h2>

<p>最近客户的一个网站总是偶尔出现502错误</p>

<p>网站架构采用的就是nginx 1.0.10+php 5.3.8+php-fpm模式</p>

<h2>问题分析</h2>

<p>首先要检查下php-fpm的进程数使用情况</p>

<p><code>
netstat -napo |grep "php-fpm" | wc -l
</code></p>

<p>如果这个查询出来的数量接近了你在php-fpm.conf里设置的数量，说明是进程数量不过用了。果断增加</p>

<p>而我这次碰到的不是这个。继续分析</p>

<p>会不会是php程序执行时间过长造成超时？</p>

<p>这个可以通过我的另外一篇文章来查看[php-fpm查找php慢速代码]</p>

<p>如果是这个问题，我们可以通过修改nginx.conf和php-fpm.conf里面相关的超时设置来解决</p>

<p>nginx.conf里面主要是如下</p>

<p><code>
fastcgi_connect_timeout 300;
fastcgi_send_timeout 300;
fastcgi_read_timeout 300;
</code>
php-fpm.conf里如要是如下</p>

<p><code>
request_terminate_timeout = 10s
</code></p>

<p>很不幸，我碰到的也不是这个问题</p>

<p>接着我开始分析是不是fastcgi缓存不够？</p>

<p>主要是在nginx.conf配置里修改如下参数</p>

<p><code>
fastcgi_buffer_size 64k;
fastcgi_buffers 4 64k;
fastcgi_busy_buffers_size 128k
</code></p>

<p>这个我还真不清楚要设置多大合适，网站说这个配置小了，有可能引发502.</p>

<h2>终极解决办法</h2>

<p>既然上面的常规办法不能解决，那我就想其他办法了。可以肯定的是502引起肯定是因为php-fpm引发的，也就是nginx将正确的客户端请求发给了后端的php-fpm进程，但是因为php-fpm进程的问题导致不能正确解析php代码。最终返回给了客户端502错误。</p>

<p>我觉得nginx既然upstream可以支持多组后端服务器轮询实现简单的负责均衡，并且可以做简单的健康检查。那我就用这个办法开多组php-fpm服务来实现一个php-fpm池，让nginx在这个php-fpm资源里通过stream轮询。</p>

<p>因为有了健康检查机制，这样就可以在错误到达客户端前换另外一个php-fpm进程重新解析了。</p>

<h3>主要配置方法</h3>

<p>先修改php-fpm.conf来开启多组php-fpm进程</p>

<p>我这里开启了php-cgi_www1和php-cgi_www2两组</p>

<p>```
[www1]
listen = /tmp/php-cgi_www1.sock
user = www
group = www
pm = dynamic
pm.max_children = 128
pm.start_servers = 32
pm.min_spare_servers = 32
pm.max_spare_servers = 96
pm.max_requests= 10240
request_terminate_timeout = 10s</p>

<p>[www2]
listen = /tmp/php-cgi_www2.sock
user = www
group = www
pm = dynamic
pm.max_children = 128
pm.start_servers = 32
pm.min_spare_servers = 32
pm.max_spare_servers = 96
pm.max_requests= 10240
request_terminate_timeout = 10s
```</p>

<p>然后重启php-fpm进程，并查看/tmp目录是否已经出现了php-cgi_www1.sock和php-cgi_www2.sock的文件</p>

<p>如果存在这两个文件，说明php-fpm配置ok了。我们继续修改nginx.conf配置</p>

<p>主要在http {} 的配置块内，加入我们要使用的轮询配置</p>

<p><code>
upstream php_servers{
  server unix:/tmp/php-cgi_www1.sock;
  server unix:/tmp/php-cgi_www2.sock;
}
fastcgi_next_upstream error timeout invalid_header http_500 http_503;
</code></p>

<p>接着修改我们原来处理php代码的fastcgi配置</p>

<p>```</p>

<pre><code>location ~ .*\.(php|php5)?$
   {
     fastcgi_pass  unix:/tmp/php-cgi_www.sock;
     fastcgi_index index.php;
     include fastcgi.conf;
   }
</code></pre>

<p>```</p>

<p>将其中的fastcgi_pass由原来的php-cgi_www.sock单独的php-fpm进程修改为我们创建的php_servers轮询池</p>

<p>```
location ~ .*.(php|php5)?$
   {</p>

<pre><code> fastcgi_pass php_servers;
 fastcgi_index index.php;
 include fastcgi.conf;
</code></pre>

<p>   }
```</p>

<p>通过这样的配置，可以肯定的是php-fpm因为采用两组来轮询工作，并且有fastcgi_next_upstream进程简单的健康检查，可以最大限度的避免502错误发生了。</p>
]]></content>
  </entry>
  
</feed>
