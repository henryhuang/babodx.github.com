<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | 鑫的方向]]></title>
  <link href="http://babodx.github.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://babodx.github.com/"/>
  <updated>2013-03-03T15:04:08+08:00</updated>
  <id>http://babodx.github.com/</id>
  <author>
    <name><![CDATA[babodx]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[rails下使用sqlite3]]></title>
    <link href="http://babodx.github.com/blog/2009/12/21/rails-use-sqlite3/"/>
    <updated>2009-12-21T00:00:00+08:00</updated>
    <id>http://babodx.github.com/blog/2009/12/21/rails-use-sqlite3</id>
    <content type="html"><![CDATA[<p>参考<a href="http://wiki.rubyonrails.org/rails/pages/HowtoUseSQLite">http://wiki.rubyonrails.org/rails/pages/HowtoUseSQLite</a></p>

<p><strong>安装SQLite</strong></p>

<p>SQLite 是一个轻量级的sql风格数据库.可以执行大部分sql92标准SQLite全部安装只有244kb,包括命令行客户端和DLL文件SQLite不用安装服务进程，就像Access数据库一样使用方便安装只需要2个文件</p>

<ul>
<li>SQLite DLL</span></li>
<li>SQLite command-line client for creating tables</li>
</ul>


<p>添加sqlite3.exe 和sqlite3.dll 到系统的path下，我放在了c:\windows\system32下了</p>

<p><strong>安装sqlite3-ruby.gem</strong></p>

<p>```
gem install sqlite3-rubyAttempting local installation of 'sqlite3'
Local gem file not found: sqlite3*.gem
Attempting remote installation of 'sqlite3'
Select which gem to install for your platform (i386-mswin32)
1. sqlite3-ruby 1.1.0 (mswin32)
2. sqlite3-ruby 1.1.0 (ruby)
3. sqlite3-ruby 1.0.1 (ruby)
...</p>

<blockquote><p>```</p></blockquote>

<p>选择 1 安装sqlite3-ruby 1.1.0(mswin32) 现在好像2才是sqlite3-ruby 1.1.0(mswin32),总之选择(mswin32)就对了</p>

<p><strong>安装图像管理工具</strong>（也可以不用，直接用命令行也很方便）<a href="http://sqlitebrowser.sourceforge.net/">http://sqlitebrowser.sourceforge.net/</a></p>

<p><strong>创建数据库</strong></p>

<p>进入项目所在目录，比如我的项目是testsqld:\work\testsql>sqlite db\test.db上面命令就在db目录下，创建了一个test.db数据库</p>

<p><strong>配置database.yml文件，访问test.db数据库</strong></p>

<p><code>
development:
   adapter: sqlite3
   database: db/test.db   #username: root
   #password:
   #host: localhost
</code></p>

<p>后面如何操作，就和使用mysql数据库一样了。建立数据表可以用db:migrate来完成</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails下上传文件并且解决乱码问题]]></title>
    <link href="http://babodx.github.com/blog/2009/12/21/rails-upload-unread/"/>
    <updated>2009-12-21T00:00:00+08:00</updated>
    <id>http://babodx.github.com/blog/2009/12/21/rails-upload-unread</id>
    <content type="html"><![CDATA[<p>这个问题是我在<a href="http://www.javaeye.com/">www.javaeye.com</a>论坛上提出的，并且由mathsfan给出了解决办法</p>

<p>首先创建一个项目，叫<strong>test</strong></p>

<p>在app目录下的controllers目录下，找到<strong>test_controller.rb</strong>文件</p>

<p>添加一个upload的action</p>

<p>```
def upload</p>

<p>end
```</p>

<p>然后在view目录下的test目录下，创建一个<strong>upload.rhtml</strong>文件</p>

<p>```
&lt;%=form_tag({:action=>'save'},:multipart=>true)%></p>

<br/>upload your file:<%=file_field("file","file")%>


<br/>


<p>&lt;%=submit_tag("upload")%>
&lt;%=end_form_tag%>
```</p>

<p>现在访问<a href="http://localhost:3000/test/upload">http://localhost:3000/test/upload</a>，应该可以看到一个上传的界面了。</p>

<p>不过还没有处理上传后的方法呢，所以还不能实现上传。因为上面的表单是提交给save这个action 的，现在还没有写呢。</p>

<p>在写save之前，先要完成一些相关的方法</p>

<p>在<strong>application.rb</strong>文件里，加入</p>

<p>```
def uploadFile(file) #处理上传后的文件保存
       if !file.original_filename.empty?
          #生成一个随机的文件名
          @filename=getFileName(file.original_filename)
          #向dir目录写入文件
          File.open("#{RAILS_ROOT}/public/images/#{@filename}", "wb") do |f|
           f.write(file.read)
          end</p>

<pre><code>      #返回文件名称
</code></pre>

<p>          return @filename
        end
end
```</p>

<p>```
def getFileName(filename)</p>

<h1>获取文件名</h1>

<p>  if !filename.nil?
     return filename
  end
end
```</p>

<p>现在在<strong>test_controller.rb</strong>里写出save的action</p>

<p><code>
def save
  unless request.get?
    if filename=uploadFile(params[:file]['file']) #调用application.rb&lt;/strong&gt;里写的uploadFile对文件保存
       render :text=&gt;filename
    end
  end
end
</code></p>

<p>文件可以正确上传到public/images下
但是中文文件名变为了乱码,但是render :text=>filename返回的名字,并不是乱码.</p>

<p> ###解决办法###</p>

<p>在ApplicationController加上：</p>

<p>```
before_filter:set_charset</p>

<p>def set_charset</p>

<pre><code> @headers["Content-Type"]="text/html;charset=gb2312" 
</code></pre>

<p>end
```</p>

<p>我试验了一下，用utf8也可以正常处理,比如按照如下写法</p>

<p><code>
def set_charset
  @headers["Content-Type"]="text/html;charset=utf8"
end
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails下request.raw_post的一些问题]]></title>
    <link href="http://babodx.github.com/blog/2009/12/21/rails-request/"/>
    <updated>2009-12-21T00:00:00+08:00</updated>
    <id>http://babodx.github.com/blog/2009/12/21/rails-request</id>
    <content type="html"><![CDATA[<p>我在学习Agile Web Development with Rails在第18章 Observers的例子中</p>

<p><code>
&lt;%=text_field_tag :search%&gt;
&lt;%=observe_field( :search,
                  :frequency =&gt; 0.5,
                  :update =&gt; :results,
                  :url =&gt; {:action =&gt; :search})%&gt;
</code></p>

<p>将text_field_tag里面的内容，每间隔0.5就提交给search这个action,然后将结果显示在<div id="results"></div>层</p>

<p>在search方法里面可以通过request.raw_post获取提交的数据</p>

<p><code>
def search
     render:text=&gt;request.raw_post   
end
</code></p>

<p>问题是上面这样返回的内容，总是在提交的内容后多一个=号</p>

<p>比如在文本框输入div层显示的就是a=</p>

<p>后来只能通过把最后2位抹去，来达到正常效果render:text=>request.raw_post.to(request.raw_post.length-2)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails实现图片验证码]]></title>
    <link href="http://babodx.github.com/blog/2009/12/21/rails-graphical-verification-code/"/>
    <updated>2009-12-21T00:00:00+08:00</updated>
    <id>http://babodx.github.com/blog/2009/12/21/rails-graphical-verification-code</id>
    <content type="html"><![CDATA[<p>写在了babo.javaeye.com了</p>

<p><a href="http://babo.javaeye.com/blog/72298">http://babo.javaeye.com/blog/72298</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails配合fckeditor实现文本编辑工具条]]></title>
    <link href="http://babodx.github.com/blog/2009/12/21/rails-fckeditor/"/>
    <updated>2009-12-21T00:00:00+08:00</updated>
    <id>http://babodx.github.com/blog/2009/12/21/rails-fckeditor</id>
    <content type="html"><![CDATA[<p>主要参考了</p>

<p><a href="http://blog.caronsoftware.com/articles/2006/08/07/fckeditor-plugin-for-rails">http://blog.caronsoftware.com/articles/2006/08/07/fckeditor-plugin-for-rails</a></p>

<p><a href="http://www.blogjava.net/rocky/archive/2006/11/04/rails-fckeditor-integration.html">http://www.blogjava.net/rocky/archive/2006/11/04/rails-fckeditor-integration.html</a></p>

<p><strong>安装</strong></p>

<p>下载<a href="http://rubyforge.org/projects/fckeditorp/">http://rubyforge.org/projects/fckeditorp/</a>项目的 FCKEditor Plugin for Rails，将下载的文件加压缩后，保存到fckeditor文件夹中</p>

<p>将fckeditor文件夹拷贝到自己项目的vendor/plugins目录下</p>

<p>运行rack fckeditor:install</p>

<p>然后在需要用到这个插件的页面，输入<code>&lt;%= javascript_include_tag "fckeditor/fckeditor" %&gt;</code>或者将这句话添加到app/view/layouts/下的对应文件中</p>

<p><strong>使用</strong></p>

<p>需要使用这个工具条的地方，输入</p>

<p><code>&lt;%=fckeditor_textarea("post", "body", :toolbarSet =&gt; 'Simple', :width =&gt; '100%', :height =&gt; '500px' )%&gt;</code></p>

<p>注意fckeditor_textarea的一个参数post必须是action传过来的一个实体类，如果action没有传过来，就会提示出错</p>

<p>比如我这里用到了post,我的action如下</p>

<p><code>
def new&lt;br&gt;
      @post = Post.new&lt;br&gt;
    end
</code></p>

<p>第二个参数，body对应表单里的字段</p>

<p>第三个参数toolbarSet=>"Simple"为工具条风格，这个风格可以在public/javascripts/fckcustom.js文件里面定义（修改后，要关闭浏览器再开才起作用）</p>

<p>第四、五个参数，代表文本区域的大小</p>

<p><strong>图片上传</strong></p>

<p>默认安装后，图片上传不能用，需要修改vendor/plugins/fckeditor/app/controllers/fckeditor_controller.rb文件的upload_file action如下</p>

<p><code>
def upload_file
      @new_file = params[:NewFile]
      @url = upload_directory_path
      begin
        ftype = @new_file.content_type.strip
        if ! MIME_TYPES.include?(ftype)
          @errorNumber = 202
          puts "#{ftype} is invalid MIME type"
          raise "#{ftype} is invalid MIME type"
        else
          path = current_directory_path + "/" + @new_file.original_filename
          File.open(path,"wb",0664) do |fp|
            FileUtils.copy_stream(@new_file, fp)
          end
          @errorNumber = 0
        end
      rescue =&gt; e
        @errorNumber = 110 if @errorNumber.nil?
      end
    
      # Fix provided by Nicola Piccinini -- &lt;a href="http://superfluo.org/"&gt;http://superfluo.org&lt;/a&gt;
      render :text =&gt; %Q'&lt;script&gt;window.parent.OnUploadCompleted(&lt;a href="mailto:#%7B@errorNumber%7D,%20%22#%7BUPLOADED+%22/%22+params%5B:Type%5D+%22/%22+@new_file.original_filename%7D%20%22);&lt;/script&gt;%20"&gt;#{@errorNumber},\"#{UPLOADED+"/"+params[:Type]+"/"+@new_file.original_filename}\");&lt;/script&gt;'&lt;/a&gt;
    
    end
</code></p>

<p>关于工具条具体某个工具怎么显示，提供那些功能，可以在public/javascripts/fckeditor/fckconfig.js文件里面定义</p>
]]></content>
  </entry>
  
</feed>
