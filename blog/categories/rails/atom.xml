<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | 鑫的方向]]></title>
  <link href="http://babodx.github.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://babodx.github.com/"/>
  <updated>2013-03-17T09:30:54+08:00</updated>
  <id>http://babodx.github.com/</id>
  <author>
    <name><![CDATA[babodx]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[rails-best-practices-1]]></title>
    <link href="http://babodx.github.com/blog/2013/03/16/rails-best-practices-1/"/>
    <updated>2013-03-16T09:43:00+08:00</updated>
    <id>http://babodx.github.com/blog/2013/03/16/rails-best-practices-1</id>
    <content type="html"><![CDATA[<h1>FAT MODEL,SKINNY CONTROLLER</h1>

<p>最近看了codeschool的教程，打算把里面讲解的rails best practices总结下。</p>

<p>视频里的第一部分就是讲解的Fat model，skinny controller。我理解的就是要尽量把业务代码写到model中，而controller要尽量的简单。</p>

<p>第一个例子是tweets_controller.rb的代码</p>

<p>``` ruby
class TweetsController &lt; ApplicationController
  def retweet</p>

<pre><code>tweet = Tweet.find(params[:id])

if tweet.user == current_user
  flash[:notice] = "Sorry, you can't retweet your own tweets"
elsif tweet.retweets.where(:user_id =&gt; current_user.id).present?
  flash[:notice] = "You already retweeted!"
else
  t = Tweet.new
  t.status = "RT #{tweet.user.name}: #{tweet.status}"
  t.original_tweet = tweet
  t.user = current_user
  t.save
  flash[:notice] = "Succesfully retweeted"
end

redirect_to tweet
</code></pre>

<p>  end
end
```</p>

<p>上面的代码就是所谓的“SAD CODE”，并不理想。最佳实践里好的代码，被codeschool称作“HAPPY CODE”,很有意思。</p>

<p>下面我们看看上面的代码该如何实现“HAYYP CODE”，首先要把一部分代码转移到tweet model里，然后上面的代码变成如下样子</p>

<!--more-->


<p>``` ruby
class TweetsController &lt; ApplicationController
  def retweet</p>

<pre><code>tweet = Tweet.find(params[:id])
flash[:notice] = tweet.retweet_by(current_user)
redirect_to tweet
</code></pre>

<p>  end
end
```</p>

<p>可以看到上面tweets_controller.rb明显比之前简单多了，主要是将大部分代码转移到了tweet model的retweet_by方法中了。</p>

<p>下面的/app/models/tweet.rb的部分代码</p>

<p>``` ruby</p>

<p>class Tweet &lt; ActiveRecord::Base
  def retweet_by(retweeter)</p>

<pre><code>if self.user == retweeter
  "Sorry,you can't retweet your own tweets"
elsif self.retweets.where(:user_id =&gt; retweeter.id).present?
  "You already retweeted!"
else
  ...
  "Succesfully retweeted"
end
</code></pre>

<p>  end
end
```</p>

<h2>小结</h2>

<p>其实这个fat model,skinny controller很好理解。就是我们要经常检查我们自己的controller，一旦发现过于复杂或者代码过多。就要开始考虑将一些重复的代码或者涉及到复杂的业务逻辑代码提取到model当中实现。上面例子当中就是将转发tweet的业务逻辑代码转移到了model中，在model中判断tweet转发的是不是自己和是否已经转发过了。而最初这些代码放在controller中就造成了controller过于复杂，涉及了业务逻辑。</p>

<p>我们只要把controller定位为action转发，而把model定义为model层和service层。涉及到业务逻辑或者各种条件判断的代码全扔到model中实际就可以了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails中文问题]]></title>
    <link href="http://babodx.github.com/blog/2013/03/14/railszhong-wen-wen-ti/"/>
    <updated>2013-03-14T10:56:00+08:00</updated>
    <id>http://babodx.github.com/blog/2013/03/14/railszhong-wen-wen-ti</id>
    <content type="html"><![CDATA[<h2>rails controller中的中文问题</h2>

<p>在ruby 1.9环境中，如果controller里出现中文，就会报错。报错如下</p>

<p><code>
invalid multibyte char (US-ASCII)
</code></p>

<p><strong>解决办法：</strong></p>

<p>在这个controller的文件开头加入如下语句</p>

<p>```</p>

<h1>encoding: utf-8</h1>

<p>```</p>

<h2>rails validates的中文问题</h2>

<!--more-->


<p>当在models里设置了validates以后，提示的错误信息都是英文。而且提示信息前面的字段也都是数据库中的字段名字很不友好。</p>

<p><strong>解决办法</strong></p>

<p>这个需要采用i18n 来解决。</p>

<p>首先在我们项目的Gemfile文件中加入如下的gem</p>

<p><code>
gem 'rails-i18n'
</code></p>

<p>然后在config/application.rb文件中声明采用的语言。我这里是中文的，声明如下</p>

<p><code>
config.i18n.default_locale = "zh-CN"
</code>
这样错误提示信息应该就是中文信息了。不过前面的字段还是数据库中的名字，这个我们需要自定义一个翻译文件放在<code>config/locales/locales</code>目录下。我这里是定义了一个zh-CN.yml文件,文件内容如下：</p>

<p>```
zh-CN:
  activerecord:</p>

<pre><code>attributes:
  student:
    id_num: "身份证号"
    password: "密码"
    password_digest: "密码"
</code></pre>

<p>```</p>

<p><strong>注意</strong> zh-CN: 就是我们<code>config.i18n.default_locale = "zh-CN"</code>中定义的。 student 是我model的名字，下面的三项是数据库的字段，也是model的属性。</p>

<p>错误提示界面如下：
<img src="http://farm9.staticflickr.com/8505/8555747473_f908011335.jpg" alt="rails中文化错误信息" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails下使用sqlite3]]></title>
    <link href="http://babodx.github.com/blog/2009/12/21/rails-use-sqlite3/"/>
    <updated>2009-12-21T00:00:00+08:00</updated>
    <id>http://babodx.github.com/blog/2009/12/21/rails-use-sqlite3</id>
    <content type="html"><![CDATA[<p>参考<a href="http://wiki.rubyonrails.org/rails/pages/HowtoUseSQLite">http://wiki.rubyonrails.org/rails/pages/HowtoUseSQLite</a></p>

<p><strong>安装SQLite</strong></p>

<p>SQLite 是一个轻量级的sql风格数据库.可以执行大部分sql92标准SQLite全部安装只有244kb,包括命令行客户端和DLL文件SQLite不用安装服务进程，就像Access数据库一样使用方便安装只需要2个文件</p>

<ul>
<li>SQLite DLL</span></li>
<li>SQLite command-line client for creating tables</li>
</ul>


<p>添加sqlite3.exe 和sqlite3.dll 到系统的path下，我放在了c:\windows\system32下了</p>

<p><strong>安装sqlite3-ruby.gem</strong></p>

<p>```
gem install sqlite3-rubyAttempting local installation of 'sqlite3'
Local gem file not found: sqlite3*.gem
Attempting remote installation of 'sqlite3'
Select which gem to install for your platform (i386-mswin32)
1. sqlite3-ruby 1.1.0 (mswin32)
2. sqlite3-ruby 1.1.0 (ruby)
3. sqlite3-ruby 1.0.1 (ruby)
...</p>

<blockquote><p>```</p></blockquote>

<p>选择 1 安装sqlite3-ruby 1.1.0(mswin32) 现在好像2才是sqlite3-ruby 1.1.0(mswin32),总之选择(mswin32)就对了</p>

<p><strong>安装图像管理工具</strong>（也可以不用，直接用命令行也很方便）<a href="http://sqlitebrowser.sourceforge.net/">http://sqlitebrowser.sourceforge.net/</a></p>

<p><strong>创建数据库</strong></p>

<p>进入项目所在目录，比如我的项目是testsqld:\work\testsql>sqlite db\test.db上面命令就在db目录下，创建了一个test.db数据库</p>

<p><strong>配置database.yml文件，访问test.db数据库</strong></p>

<p><code>
development:
   adapter: sqlite3
   database: db/test.db   #username: root
   #password:
   #host: localhost
</code></p>

<p>后面如何操作，就和使用mysql数据库一样了。建立数据表可以用db:migrate来完成</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails下上传文件并且解决乱码问题]]></title>
    <link href="http://babodx.github.com/blog/2009/12/21/rails-upload-unread/"/>
    <updated>2009-12-21T00:00:00+08:00</updated>
    <id>http://babodx.github.com/blog/2009/12/21/rails-upload-unread</id>
    <content type="html"><![CDATA[<p>这个问题是我在<a href="http://www.javaeye.com/">www.javaeye.com</a>论坛上提出的，并且由mathsfan给出了解决办法</p>

<p>首先创建一个项目，叫<strong>test</strong></p>

<p>在app目录下的controllers目录下，找到<strong>test_controller.rb</strong>文件</p>

<p>添加一个upload的action</p>

<p>```
def upload</p>

<p>end
```</p>

<p>然后在view目录下的test目录下，创建一个<strong>upload.rhtml</strong>文件</p>

<p>```
&lt;%=form_tag({:action=>'save'},:multipart=>true)%></p>

<br/>upload your file:<%=file_field("file","file")%>


<br/>


<p>&lt;%=submit_tag("upload")%>
&lt;%=end_form_tag%>
```</p>

<p>现在访问<a href="http://localhost:3000/test/upload">http://localhost:3000/test/upload</a>，应该可以看到一个上传的界面了。</p>

<p>不过还没有处理上传后的方法呢，所以还不能实现上传。因为上面的表单是提交给save这个action 的，现在还没有写呢。</p>

<p>在写save之前，先要完成一些相关的方法</p>

<p>在<strong>application.rb</strong>文件里，加入</p>

<p>```
def uploadFile(file) #处理上传后的文件保存
       if !file.original_filename.empty?
          #生成一个随机的文件名
          @filename=getFileName(file.original_filename)
          #向dir目录写入文件
          File.open("#{RAILS_ROOT}/public/images/#{@filename}", "wb") do |f|
           f.write(file.read)
          end</p>

<pre><code>      #返回文件名称
</code></pre>

<p>          return @filename
        end
end
```</p>

<p>```
def getFileName(filename)</p>

<h1>获取文件名</h1>

<p>  if !filename.nil?
     return filename
  end
end
```</p>

<p>现在在<strong>test_controller.rb</strong>里写出save的action</p>

<p><code>
def save
  unless request.get?
    if filename=uploadFile(params[:file]['file']) #调用application.rb&lt;/strong&gt;里写的uploadFile对文件保存
       render :text=&gt;filename
    end
  end
end
</code></p>

<p>文件可以正确上传到public/images下
但是中文文件名变为了乱码,但是render :text=>filename返回的名字,并不是乱码.</p>

<p> ###解决办法###</p>

<p>在ApplicationController加上：</p>

<p>```
before_filter:set_charset</p>

<p>def set_charset</p>

<pre><code> @headers["Content-Type"]="text/html;charset=gb2312" 
</code></pre>

<p>end
```</p>

<p>我试验了一下，用utf8也可以正常处理,比如按照如下写法</p>

<p><code>
def set_charset
  @headers["Content-Type"]="text/html;charset=utf8"
end
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails下request.raw_post的一些问题]]></title>
    <link href="http://babodx.github.com/blog/2009/12/21/rails-request/"/>
    <updated>2009-12-21T00:00:00+08:00</updated>
    <id>http://babodx.github.com/blog/2009/12/21/rails-request</id>
    <content type="html"><![CDATA[<p>我在学习Agile Web Development with Rails在第18章 Observers的例子中</p>

<p><code>
&lt;%=text_field_tag :search%&gt;
&lt;%=observe_field( :search,
                  :frequency =&gt; 0.5,
                  :update =&gt; :results,
                  :url =&gt; {:action =&gt; :search})%&gt;
</code></p>

<p>将text_field_tag里面的内容，每间隔0.5就提交给search这个action,然后将结果显示在<div id="results"></div>层</p>

<p>在search方法里面可以通过request.raw_post获取提交的数据</p>

<p><code>
def search
     render:text=&gt;request.raw_post   
end
</code></p>

<p>问题是上面这样返回的内容，总是在提交的内容后多一个=号</p>

<p>比如在文本框输入div层显示的就是a=</p>

<p>后来只能通过把最后2位抹去，来达到正常效果render:text=>request.raw_post.to(request.raw_post.length-2)</p>
]]></content>
  </entry>
  
</feed>
