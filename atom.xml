<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[鑫的方向]]></title>
  <link href="http://babodx.github.com/atom.xml" rel="self"/>
  <link href="http://babodx.github.com/"/>
  <updated>2013-02-26T17:44:42+08:00</updated>
  <id>http://babodx.github.com/</id>
  <author>
    <name><![CDATA[babodx]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[git-first-on-ubuntu]]></title>
    <link href="http://babodx.github.com/blog/2013/02/24/git-first-on-ubuntu/"/>
    <updated>2013-02-24T08:29:00+08:00</updated>
    <id>http://babodx.github.com/blog/2013/02/24/git-first-on-ubuntu</id>
    <content type="html"><![CDATA[<h1>ubuntu 12.10下初次使用git</h1>

<p>前些时候在mac下面使用了git，感觉很棒。今天在单位安装了一台ubuntu 12.10的桌面系统，也开始尝试用git的方式来写blog。</p>

<h2>安装</h2>

<p>ubuntu下面安装git非常容易。</p>

<pre><code>sudo apt-get install git-core
</code></pre>

<p>然后对git进行全局设置</p>

<pre><code>git config user.name "yourname"
git config user.email "youremail"
</code></pre>

<p>设置后用下面命令可以查看</p>

<pre><code>git config -l
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我2013年学习列表]]></title>
    <link href="http://babodx.github.com/blog/2013/02/20/wo-2013nian-xue-xi-lie-biao/"/>
    <updated>2013-02-20T13:55:00+08:00</updated>
    <id>http://babodx.github.com/blog/2013/02/20/wo-2013nian-xue-xi-lie-biao</id>
    <content type="html"><![CDATA[<h1>2013学习计划</h1>

<p>2012年开始了，这一年打算好好学习下ruby、python两种语言和rails框架。</p>

<!--more-->


<h2>学习内容列表</h2>

<h3>ruby</h3>

<p>打算通过阅读图书和在线学习两种方式来学习ruby。</p>

<p>图书主要就是一本手边的<strong>Programming ruby 2nd</strong></p>

<p>在线学习倒是有不少好的资源</p>

<ul>
<li><a href="http://rubymonk.com">rubymonk</a></li>
<li><a href="http://www.codeschool.com">codeschool</a></li>
<li><a href="http://teamtreehouse.com/">teamtreehouse</a></li>
</ul>


<h3>python</h3>

<p>python主要是通过阅读<strong>Python基础教程 第2版</strong></p>

<h3>rails</h3>

<p>主要通过一下网站来学习了</p>

<ul>
<li><a href="http://ruby-china.org">ruby-china</a></li>
<li><a href="http://happycasts.net">happycasts</a></li>
<li><a href="http://railscasts-china.com/">railscasts-china</a></li>
<li><a href="http://www.codeschool.com">codeschool</a></li>
<li><a href="http://teamtreehouse.com/">teamtreehouse</a></li>
</ul>


<h2>希望可以尽快入门rails开发</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开始使用octopress]]></title>
    <link href="http://babodx.github.com/blog/2013/02/13/kai-shi-shi-yong-octopress/"/>
    <updated>2013-02-13T14:54:00+08:00</updated>
    <id>http://babodx.github.com/blog/2013/02/13/kai-shi-shi-yong-octopress</id>
    <content type="html"><![CDATA[<h1>概述</h1>

<p>最近在看<a href="http://ruby-china.org">ruby-china.org</a>和<a href="http://happycasts.net">happycasts.net</a>的视频。开始尝试使用git来做版本控制。原来都是使用svn，所以最近一直在折腾和学习。看到很多编程人员都开始采用octopress来代替wordpress写blog了。我也开始尝试使用这个octopress的blog系统。</p>

<p>octopress是一套基于ruby构建的blog管理系统，通过git来为我们的文章做版本控制，并且通过rake命令可以简单的完成博客的发布与远程站点的同步。配合github提供的pages功能，我们连自己的主机都可以省了。非常方便。</p>

<!--more-->


<h2>新建文章</h2>

<p>写文章只要进入到我们的octopress目录下，输入下面命令就可以创建一个新的blog文章。</p>

<pre><code>rake new_post\[title\]
</code></pre>

<p>其中title就是你文章的标题，可以根据自己实际情况填写。</p>

<h2>写文章</h2>

<p>我们创建的文章会保存在下面的目录内</p>

<pre><code>~/project/octopress/source/_posts
</code></pre>

<p>文件名为我们创建时候的日期-title.markdown的形式，中文的title会自动转为拼音。例如我这篇文章的名字就如下所示</p>

<pre><code>2013-02-13-kai-shi-shi-yong-octopress.markdown
</code></pre>

<p>我们只需要用我们熟悉的编辑器打开这个.markdown文件来写我们的文章就可以了。而文章的写作采用markdown语言。这个语言也是我最近才接触的，感觉非常容易上手，可以说完全是为了写作而诞生的。可以让我们愉快的写作，而不是考虑用什么字体，用什么格式，怎么对齐等问题。</p>

<p>有了这个很好的开始，后面就是慢慢学习octopress的技巧和markdown的各种语法了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntu 8.10下同步wm6.1手机]]></title>
    <link href="http://babodx.github.com/blog/2009/12/21/winphone-SynceWithUbuntu/"/>
    <updated>2009-12-21T00:00:00+08:00</updated>
    <id>http://babodx.github.com/blog/2009/12/21/winphone-SynceWithUbuntu</id>
    <content type="html"><![CDATA[<p>参考了</p>

<ul>
<li><a href="http://www.synce.org/moin/SynceWithUbuntu">http://www.synce.org/moin/SynceWithUbuntu</a></li>
<li>http://hi.baidu.com/john_zhy/blog/item/50e39f317240141febc4af5a.html</li>
</ul>


<p>我的本本 IBM R61</p>

<p>系统 ubuntu 8.10从 8.04升级上来的。</p>

<p>手机 eten X800 wm6.1英文系统</p>

<p>原来一直不能在ubuntu下面同步手机资料，昨天参考了上面两个帖子，最后成功了。</p>

<p>1、首先添加源</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo gedit   /etc/apt/sources.list</span></code></pre></td></tr></table></div></figure>


<p>在末尾添加</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>deb &lt;a href="http://ppa.launchpad.net/synce/ubuntu" target="_blank"&gt;http://ppa.launchpad.net/synce/ubuntu&lt;/a&gt; hardy main
</span><span class='line'>
</span><span class='line'>deb-src &lt;a href="http://ppa.launchpad.net/synce/ubuntu" target="_blank"&gt;http://ppa.launchpad.net/synce/ubuntu&lt;/a&gt; hardy main</span></code></pre></td></tr></table></div></figure>


<p>保存，关闭</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get update</span></code></pre></td></tr></table></div></figure>


<p>我没有更新源，但是也成功。可能是8.10的缘故</p>

<p>2、更新usb驱动（仅内核在2.6.24-19之前的，如果比这个新请跳过本步骤）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo rmmod rndis_host cdc_ether usbnet
</span><span class='line'>sudo rm /lib/modules/`uname -r`/kernel/drivers/net/usb/{rndis_host,cdc_ether,usbnet}.ko
</span><span class='line'>sudo apt-get install usb-rndis-source cdbs
</span><span class='line'>sudo module-assistant auto-install usb-rndis
</span><span class='line'>sudo apt-get install synce-hal librra0-tools librapi2-tools</span></code></pre></td></tr></table></div></figure>


<p>因为我的内核是2.6.27-7的，所以跳过了这步。但是我安装了后面的软件包</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install synce-hal librra0-tools librapi2-tools</span></code></pre></td></tr></table></div></figure>


<p>3、安装<strong>SynCE-GNOME</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install python-setuptools</span></code></pre></td></tr></table></div></figure>


<p> 下载<a href="http://downloads.sourceforge.net/synce/synce-gnome-0.11.tar.gz">synce-gnome-0.11.tar.gz</a></p>

<p> 解压，在终端进入其目录，运行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>python setup.py build
</span><span class='line'>sudo python setup.py install</span></code></pre></td></tr></table></div></figure>


<p>安装<strong>notification-daemon</strong>（如果没有安装过的话，用新得立软件包管理器搜索一下就可以了）</p>

<p>这个步骤完全做了一次，notification-daemon系统已经安装过了</p>

<p>4、连接好手机，运行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/sbin/ifconfig -a | grep 80:00:60:0f:e8:00   | cut -d " " -f 1</span></code></pre></td></tr></table></div></figure>


<p>记下他输出的东西</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo gedit   /etc/network/interfaces</span></code></pre></td></tr></table></div></figure>


<p>在末尾添加<code>iface &lt;rndis0&gt; inet dhcp</code></p>

<p>ps:&#8221;&lt;>&#8221;里面的是我在上面那步里输出的，你应该更换成你自己的，不带“&lt;>“ 保存并关闭，然后运行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo /etc/init.d/networking restart</span></code></pre></td></tr></table></div></figure>


<p>这次也是按照作的，我的网卡是多出来一个eth1(这个根据自己系统决定)。所以我在interfaces文件后面加入了</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>iface eth1 inet dhcp</span></code></pre></td></tr></table></div></figure>


<p>5、安装OpenSync</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install multisync-tools opensync-plugin-evolution opensync-plugin-synce</span></code></pre></td></tr></table></div></figure>


<p>6、现在该安装的都安装好了，就可以开始同步了<code>synce-sync-engine</code>如果出现如下错误</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>File "/usr/bin/sync-engine", line 84, in &lt;module&gt;
</span><span class='line'>
</span><span class='line'> configObj = Config.Config(progopts)
</span><span class='line'>
</span><span class='line'>   File "/usr/lib/python2.5/site-packages/SyncEngine/config.py", line 292, in __init__
</span><span class='line'>
</span><span class='line'> oldconf = os.path.join(self.path,"config.xml")
</span><span class='line'>
</span><span class='line'>AttributeError: Config instance has no attribute 'path'
</span></code></pre></td></tr></table></div></figure>


<p>请下载<a href="http://synce.svn.sf.net/svnroot/synce/releases/0.11.1/sync-engine/config/config.xml">config.xml</a>，保存为~/.synce/config.xml（提示：&#8221;~&#8221;为自己的家目录)</p>

<p>创建同步项目<strong>synce-create-partnership &#8220;Linux desktop&#8221; &#8220;Contacts,Calendar&#8221;</strong></p>

<p>ps：还有别的，可自行选择Contacts， Calendar， Tasks， Files 等</p>

<p>创建OpenSync group</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msynctool --addgroup synce-sync
</span><span class='line'>
</span><span class='line'>msynctool --addmember synce-sync synce-opensync-plugin
</span><span class='line'>
</span><span class='line'>msynctool --addmember synce-sync evo2-sync</span></code></pre></td></tr></table></div></figure>


<p>然后同步synce-sync-engine</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msynctool --sync synce-sync</span></code></pre></td></tr></table></div></figure>


<p>他会同步到evolution里面</p>

<p>我上面的照着做，全部成功了。</p>

<p><strong>我的一些问题</strong></p>

<p>据说安装了synce-gnomevfs后，可以在Nautilus里面看手机里的内容，但是我没有成功
目前只能通过synce-pls、synce-pcp等命令，来操作手机里面文件。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[试用ubuntu 8.04和LVM动态增加分区]]></title>
    <link href="http://babodx.github.com/blog/2009/12/21/ubuntu-dynamic-resize-lvm/"/>
    <updated>2009-12-21T00:00:00+08:00</updated>
    <id>http://babodx.github.com/blog/2009/12/21/ubuntu-dynamic-resize-lvm</id>
    <content type="html"><![CDATA[<p>我在虚拟机VMware里面安装了ubuntu 8.04.</p>

<p>安装的时候，只是选择了openssh这个服务。安装后感觉系统很干净</p>

<p><strong>磁盘占用</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/dev/mapper/ubuntu-root                      5.6G 321M 5.3G   6% /</span></code></pre></td></tr></table></div></figure>


<p>系统就用了不到400M</p>

<p><strong>内存</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>                   total       used       free     shared    buffers     cached
</span><span class='line'>Mem:           249         39        209          0          3         16</span></code></pre></td></tr></table></div></figure>


<p>减掉buffers和cached的内容，还有我ssh远程连接的占用。实际系统启动后内存也就需要17M</p>

<p><strong>LVM</strong></p>

<p>安装系统的时候，我就选择了整个磁盘启用LVM，采用ubuntu默认分区的方式。</p>

<p>ubuntu默认分了2个区/sda1和/sda5。sda1用来做/boot，sda5用来做LVM。文件系统都是默认的ext3。</p>

<p>然后在LVM里面默认建立了2个LV( Logical volume)，一个/dev/ubuntu/root用来做/ ，一个/dev/ubuntu/swap_1用来做swap交换分区。我又手动修改了文件系统，采用reiserfs。</p>

<p><strong>动态添加/分区大小</strong></p>

<p>我先添加了一个硬盘，系统识别为sdb</p>

<p>对这个盘<strong>创建分区</strong>（LVM可以不用分区的，但是需要动态添加到/分区，所以需要有文件系统，不能添加后格式化/分区吧）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo fdisk /dev/sdb
</span><span class='line'>n --&gt;创建分区
</span><span class='line'>t --&gt;修改分区类型为8e
</span><span class='line'>w --&gt;保存结果</span></code></pre></td></tr></table></div></figure>


<p>现在系统可以识别/dev/sdb1这个设备了。</p>

<p><strong>创建PV(Physical volume)</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo pvcreate /dev/sdb1</span></code></pre></td></tr></table></div></figure>


<p><strong>创建VG(Volume group)</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo vgextend ubuntu /dev/sdb1</span></code></pre></td></tr></table></div></figure>


<p><strong>扩展LV(Logical volume)</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo lvextend -L +2G /dev/ubuntu/root&lt;br&gt;</span></code></pre></td></tr></table></div></figure>


<p>这样就给/dev/ubuntu/root这个设备大小增加了2G。可以通过sudo lvdisply查看
但是这个时候df -h还是没有变化的，需要调整文件系统。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo resize_reiserfs -s +2G /dev/ubuntu/root&lt;br&gt;</span></code></pre></td></tr></table></div></figure>


<p>这样就完成了全部动态扩展分区。而且是服务器一直在线状态，不用关机。</p>

<p>调整Swap</p>

<p>还是和上面一样的情景，只要VG里面还有剩余空间就可以用来扩展swap用。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo swapoff -a</span></code></pre></td></tr></table></div></figure>


<p>关闭正在用的swap分区</p>

<p>然后</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo lvextend -L +200M /dev/ubuntu/swap_1</span></code></pre></td></tr></table></div></figure>


<p>给/dev/ubuntu/swap_1扩展了200M容量</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo mkswap /dev/ubuntu/swap_1</span></code></pre></td></tr></table></div></figure>


<p>建立swap的文件系统</p>

<p>最后</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo swapon -a</span></code></pre></td></tr></table></div></figure>


<p>启用新的swap系统。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntu 8.04升级到8.10]]></title>
    <link href="http://babodx.github.com/blog/2009/12/21/ubuntu-804-update-to-810/"/>
    <updated>2009-12-21T00:00:00+08:00</updated>
    <id>http://babodx.github.com/blog/2009/12/21/ubuntu-804-update-to-810</id>
    <content type="html"><![CDATA[<h1>升级</h1>

<p>昨天开始作的升级。</p>

<p>早上到单位，就开始<code>Alt+F2</code></p>

<p>在弹出的命令行窗口输入
<code>update-manager -d</code></p>

<p>然后就进入了漫长的等待，单位网络那个垃圾。。。。。告诉我42天。。。。。</p>

<p>一直到下班，下载了900多个文件，一共要下载1300多</p>

<p>晚上到家继续update-manager -d 发现居然可以接着下载，还以为要重新来呢。家里好点，告诉我3个小时,后来就睡觉了。</p>

<p>今天早上起来，发现已经下载完成了，开始到安装更新这一步了，弹出个窗口等我确认。</p>

<p>我点上开始，就洗漱去了。一直到要上班也没有安装完成。（TMD，居然忘记今天星期五，不能开车。还是老婆提醒我，才想起来。）这次我可不敢关机了，怕升级一半，下次进不来系统。直接把本本和上盖子放包里了，下楼打车上班。</p>

<p>在出租车里，完成了全部更新。关机。</p>

<p><strong>启动</strong></p>

<p>到了单位，发现系统总卡在进度条进不去。</p>

<p>按Alt+F1然后 Alt+F8查看下文字模式的启动信息，发现一直卡在*Configuring network interfaces&#8230;</p>

<p>这个第一次启动，没有办法（希望有好办法的，告诉下。）我就一直死等呀。。。感觉过了20分钟？？？</p>

<p>进入系统了，3D显卡驱动不行。运行uname -a查看，内核还在用8.04的2.6.24-21.</p>

<p>先修改网络吧
<code>sudo gedit /etc/network/interfaces</code></p>

<p>将里面的</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>auto eth0
</span><span class='line'>iface eth0 inet dhcp
</span><span class='line'>auto lo
</span><span class='line'>auto wlan0</span></code></pre></td></tr></table></div></figure>


<p>都注释掉，变成下面样子</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#auto lo
</span><span class='line'>iface lo inet loopback
</span><span class='line'>#iface eth0 inet dhcp
</span><span class='line'>address 10.11.10.164
</span><span class='line'>netmask 255.255.255.0
</span><span class='line'>gateway 10.11.10.254
</span><span class='line'>#nameserver 202.106.0.20
</span><span class='line'>#auto eth0
</span><span class='line'>iface wlan0 inet dhcp
</span><span class='line'>wpa-psk 7640768b3d6b31f834b63abc8d2d667ae10f8bc3c41a8e4e87ec2c104d963a1e
</span><span class='line'>wpa-driver wext
</span><span class='line'>wpa-key-mgmt WPA-PSK
</span><span class='line'>wpa-proto WPA
</span><span class='line'>wpa-ssid babohome
</span><span class='line'>#auto wlan0</span></code></pre></td></tr></table></div></figure>


<p>接着修改/etc/NetworkManager/nm-system-settings.conf文件
<code>sudo gedit /etc/NetworkManager/nm-system-settings.conf</code></p>

<p>将文件里的<code>[ifupdown] manager=false</code>改成<code>[ifupdown] manager=true</code></p>

<p>这样基本启动速度的问题就正常</p>

<p><strong>内核</strong></p>

<p>再来说内核</p>

<p>内核需要手动编辑下grub的启动配置文件了。其实2.6.27-7内核已经安装了，就是没有给我们加入的menu.lst文件里面。修改menu.lst</p>

<p><code>sudo gedit /boot/grub/menu.lst</code></p>

<p>我的修改如下，这个应该每个人的不太一样。大家可以拷贝以前自己的文件进行修改</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>title        Ubuntu 8.04.1, kernel 2.6.27-7-generic
</span><span class='line'>root        (hd0,1)
</span><span class='line'>kernel        /boot/vmlinuz-2.6.27-7-generic root=UUID=614a1c10-6ed3-45c9-b24d-f7b3e39725b2 ro quiet splash locale=zh_CN
</span><span class='line'>initrd        /boot/initrd.img-2.6.27-7-generic
</span><span class='line'>quiet
</span><span class='line'>title        Ubuntu 8.04.1, kernel 2.6.27-7-generic (recovery mode)
</span><span class='line'>root        (hd0,1)
</span><span class='line'>kernel        /boot/vmlinuz-2.6.27-7-generic root=UUID=614a1c10-6ed3-45c9-b24d-f7b3e39725b2 ro single
</span><span class='line'>initrd        /boot/initrd.img-2.6.27-7-generic</span></code></pre></td></tr></table></div></figure>


<p>这个修改后，先不要重新启动。因为我们还没有卸载显卡驱动，要不重启后，卸载驱动还要继续重启。</p>

<p><strong>卸载现有的显卡驱动</strong></p>

<p>我原来显卡驱动是用envyng -t来安装的，现在还用这个工具卸载</p>

<p>在终端<code>envyng -t</code></p>

<p>然后选卸载驱动，安后等卸载完成后，重启就ok了</p>

<p><strong>安装显卡驱动</strong></p>

<p>注意，如果内核还是2.6.24-21，新的驱动安装不上。</strong>这次我没有用envyng -t来安装，而是用系统->系统管理->硬件驱动来安装的</p>

<p>推荐我的是nvidia 177.80的驱动</p>

<p>等待安装完成后。 Ctrl+Alt+Backspace 重新启动X server</p>

<p>一切ok</p>

<p><strong>一些问题</strong>
在启动过程中，发现samba deamon启动fail还没有看是什么原因。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何快速统计服务器访问量]]></title>
    <link href="http://babodx.github.com/blog/2009/12/21/quick-stats-server-visits/"/>
    <updated>2009-12-21T00:00:00+08:00</updated>
    <id>http://babodx.github.com/blog/2009/12/21/quick-stats-server-visits</id>
    <content type="html"><![CDATA[<p>最近看了javaeye上面<strong>robbin</strong>的一篇文章，学习到了很多知识。</p>

<p><a href="http://robbin.javaeye.com/blog/97287">http://robbin.javaeye.com/blog/97287</a> 如何快速统计RoR网站的访问量</p>

<p>我的服务器是Apache+tomcat的配置，上面跑了几个网站。都是基于apache 虚拟主机配置的。</p>

<p>apache配置如下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Include conf/vhost_*.conf</span></code></pre></td></tr></table></div></figure>


<p>然后每个虚拟主机对应一个配置文件</p>

<p>例如下面的(一些信息用???代替了，都是域名和姓名等个人信息)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;VirtualHost *:80&gt;
</span><span class='line'>    ServerAdmin ???&lt;a href="mailto:???@???.cn"&gt;@???.cn&lt;/a&gt;
</span><span class='line'>    DocumentRoot /home/???/www
</span><span class='line'>    ServerName &lt;a href="http://www./???.org"&gt;www.???.org&lt;/a&gt;
</span><span class='line'>    DirectoryIndex index.jsp index.htm
</span><span class='line'>    ErrorLog logs/abc-error_log
</span><span class='line'>    CustomLog "| /usr/sbin/rotatelogs /var/log/httpd/abc-access_%Y%m%d.log 86400" common
</span><span class='line'>    &lt;Location "/*.jsp"&gt;
</span><span class='line'>         JkUriSet worker ajp13:localhost:8009
</span><span class='line'>    &lt;/Location&gt;
</span><span class='line'>&lt;/VirtualHost&gt;</span></code></pre></td></tr></table></div></figure>


<p>这样配置后，就会在/var/log/httpd下面按照虚拟主机名字和日期，每天生成一个访问日志文件</p>

<p><strong>统计每日动态请求处理总数</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat /var/log/httpd/abc-access_20081116.log |grep "200 "|wc -l</span></code></pre></td></tr></table></div></figure>


<p><strong>统计URL的访问频度</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat /var/log/httpd/abc-access_20081116.log |grep "200 "|awk '{print $7}'|sort|uniq -c</span></code></pre></td></tr></table></div></figure>


<p><strong>统计时间访问频度</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat /var/log/httpd/abc-access_20081116.log |grep "200 "|awk '{print $4}'|awk -F : '{print $2}'|sort|uniq -c</span></code></pre></td></tr></table></div></figure>


<p><strong>以上这些是基于CentOS+apache+tomcat实现的</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@ict ~]# cat /var/log/httpd/esdinchina-access_20081117.log |grep "200 "|awk '{print $4}'|awk -F : '{print $2}'|sort|uniq -c</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个很好的开源企业内部IM解决方案]]></title>
    <link href="http://babodx.github.com/blog/2009/12/21/opensource-im/"/>
    <updated>2009-12-21T00:00:00+08:00</updated>
    <id>http://babodx.github.com/blog/2009/12/21/opensource-im</id>
    <content type="html"><![CDATA[<p>今天发现了<a href="http://www.igniterealtime.org/">http://www.igniterealtime.org</a>这个项目首页</p>

<p>这个项目可以在企业内部架设一台服务器，来完成内部IM功能。客户端可以想QQ或者MSN一样登陆。并且通过服务器上设置GATEWAY功能，还能与MSN等主流软件通讯。</p>

<p>具体功能还没有测试，不过打算有时间的时候架设下进行试用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[怎么mount一个xen的img映像。转载]]></title>
    <link href="http://babodx.github.com/blog/2009/12/21/howto-mount-xen-img/"/>
    <updated>2009-12-21T00:00:00+08:00</updated>
    <id>http://babodx.github.com/blog/2009/12/21/howto-mount-xen-img</id>
    <content type="html"><![CDATA[<ul>
<li>First you need to find out the partitions and the startsector of partitions:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@xen rruban]# file rheltest.img rheltest.img: x86 boot sector, GRand Unified Bootloader (0.94); 
</span><span class='line'>partition 
</span><span class='line'>1: ID=0x83, active, starthead 1, startsector 63, 208782 sectors; partition 
</span><span class='line'>2: ID=0x8e, starthead 0, startsector 208845, 3871665 sectors, code offset 0x48</span></code></pre></td></tr></table></div></figure>


<p>There are 3 partitions inside the image file. The startsector of each partition is also listed. Boot partition will have start sector 63.</p>

<ul>
<li>Now you need to get the sector size:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@xen]fdisk -lu rheltest.img
</span><span class='line'>Disk rheltest.img: 0 MB, 0 bytes 255 heads, 63 sectors/track, 0 cylinders, total 0 sectors 
</span><span class='line'>Units = sectors of 1 * 512 = 512 bytes 
</span><span class='line'>Device Boot Start End Blocks Id System 
</span><span class='line'>rheltest.img1 * 63 208844 104391 83 Linux 
</span><span class='line'>rheltest.img2 208845 4080509 1935832+ 8e Linux LVM </span></code></pre></td></tr></table></div></figure>


<p>The above shows the sector byte size is 512 byte.</p>

<ul>
<li>To calculating the offset: offset = start_sector x sector_byte_size.</li>
</ul>


<p>The startsector is 63 for the first partition, therefore the first partition offset is: 63x512=32256</p>

<ul>
<li>Finally, to mount the xen image, use:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mount -o loop,offset=32256 test.img /foldername</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntu下arp攻击防御和反击！]]></title>
    <link href="http://babodx.github.com/blog/2009/12/21/defense-arp-attack-on-ubuntu/"/>
    <updated>2009-12-21T00:00:00+08:00</updated>
    <id>http://babodx.github.com/blog/2009/12/21/defense-arp-attack-on-ubuntu</id>
    <content type="html"><![CDATA[<p>今天在单位，发现有人在用聚生网管和p2p终结者</p>

<p>在windows下面，可以安装arp防火墙，还可以通过安装同类软件，进行检测。可是我已经转到ubuntu上了，总不能一旦被攻击，就回windows吧。于是上网找了一些关于linux下防止arp攻击的方法。</p>

<p><strong>第一种方法</strong></p>

<p>用静态arp.</p>

<p>这种方法就是通过在 /etc/ethers 建立ip和mac地址对应记录。然后用arp -f来读取记录。这样将网关的mac地址和ip都建立在静态arp文件里。就不容易被arp欺骗了。</p>

<p>还可以配合关闭arp解析，用<code>ifconfig eth0 -arp</code></p>

<p><strong>第二中方法</strong></p>

<p>采用arping</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>babo@babo-laptop:~$ arping 
</span><span class='line'>Usage: arping [-fqbDUAV] [-c count] [-w timeout] [-I device] [-s source] destination
</span><span class='line'>-f : quit on first reply
</span><span class='line'>-q : be quiet
</span><span class='line'>-b : keep broadcasting, don't go unicast
</span><span class='line'>-D : duplicate address detection mode
</span><span class='line'>-U : Unsolicited ARP mode, update your neighbours
</span><span class='line'>-A : ARP answer mode, update your neighbours
</span><span class='line'>-V : print version and exit
</span><span class='line'>-c count : how many packets to send
</span><span class='line'>-w timeout : how long to wait for a reply
</span><span class='line'>-I device : which ethernet device to use (eth0)
</span><span class='line'>-s source : source ip address
</span><span class='line'>destination : ask for what ip address
</span><span class='line'>用法举例：比如我的ip 192.168.1.101 网关:192.168.1.1
</span><span class='line'>就用arping -U -I eth0 -s 192.168.1.101 192.168.1.1
</span><span class='line'>显示结果如下
</span><span class='line'>Unicast reply from 192.168.1.1 [00:21:29:94:62:47] 1.999ms
</span><span class='line'>Unicast reply from 192.168.1.1 [00:21:29:94:62:47] 9.571ms
</span><span class='line'>Unicast reply from 192.168.1.1 [00:21:29:94:62:47] 1.245ms
</span><span class='line'>Unicast reply from 192.168.1.1 [00:21:29:94:62:47] 1.227ms
</span><span class='line'>Unicast reply from 192.168.1.1 [00:21:29:94:62:47] 1.390ms
</span><span class='line'>Unicast reply from 192.168.1.1 [00:21:29:94:62:47] 4.526ms
</span><span class='line'>Unicast reply from 192.168.1.1 [00:21:29:94:62:47] 1.294ms
</span><span class='line'>Unicast reply from 192.168.1.1 [00:21:29:94:62:47] 1.245ms
</span><span class='line'>Unicast reply from 192.168.1.1 [00:21:29:94:62:47] 1.239ms
</span><span class='line'>Unicast reply from 192.168.1.1 [00:21:29:94:62:47] 1.266ms
</span><span class='line'>Unicast reply from 192.168.1.1 [00:21:29:94:62:47] 1.259ms
</span><span class='line'>Unicast reply from 192.168.1.1 [00:21:29:94:62:47] 1.267ms
</span><span class='line'>Sent 12 probes (1 broadcast(s))
</span><span class='line'>Received 12 response(s)</span></code></pre></td></tr></table></div></figure>


<p><strong>终极解决办法</strong></p>

<p>采用arpoison来解决是最好的办法了，这个办法还是参考了《linux下arp攻击的解决方案［原］》的办法。</p>

<p>arpoison需要libnet的库才能正确编译，所以要下载libnet和arpoison两个软件。</p>

<p><a href="http://www.packetfactory.net/libnet">arpoison主页</a></p>

<p><a href="http://www.packetfactory.net/libnet">libnet主页</a>&#8221;</p>

<p><strong>安装</strong></p>

<p>现安装libnet,因为是源代码编译，需要gcc等我就不说了。去查看具体ubuntu源代码安装需要的软件包吧</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tar zxvf libnet.tar.gz
</span><span class='line'>cd libnet/
</span><span class='line'>sudo ./configure
</span><span class='line'>sudo make
</span><span class='line'>sudo make install</span></code></pre></td></tr></table></div></figure>


<p>编译过程中，会提示也些警告，没有关系。反正安装后，有/usr/lib/libnet.a就可以了
然后安装arpoison</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tar zxvf arpoison-0.6.tar.gz 
</span><span class='line'>cd arpoison/
</span><span class='line'>sudo gcc arpoison.c /usr/lib/libnet.a -o arpoison
</span><span class='line'>sudo mv arpoison /usr/sbin/</span></code></pre></td></tr></table></div></figure>


<p>用法举例：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>babo@babo-laptop:~$ sudo arpoison
</span><span class='line'>Usage: -i &lt;device&gt; -d &lt;dest IP&gt; -s &lt;src IP&gt; -t &lt;target MAC&gt; -r &lt;src MAC&gt; [-a] [-w time between packets] [-n number to send]
</span><span class='line'>说明
</span><span class='line'>-i 指定发送arp包的网卡接口eth0
</span><span class='line'>-d 192.168.1.1 指定目的ip为192.168.1.1
</span><span class='line'>-s 192.168.1.101 指定源ip为192.168.1.101
</span><span class='line'>-t ff:ff:ff:ff:ff:ff 指定目的mac地址为ff:ff:ff:ff:ff:ff(arp广播地址)
</span><span class='line'>-r 00:1c:bf:03:9f:c7 指定源mac地址为00:1c:bf:03:9f:c7</span></code></pre></td></tr></table></div></figure>


<p>比如我想防止arp攻击</p>

<p><code>sudo arpoison -i eth0 -d 192.168.1.1 -s 192.168.1.101 -t ff:ff:ff:ff:ff:ff -r 00:1c:bf:03:9f:c7</code></p>

<p>比如我想攻击192.168.1.50的机器不让他上网</p>

<p><code>sudo arpoison -i eth0 -d 192.168.1.50 -s 192.168.1.1 -t ff:ff:ff:ff:ff:ff -r 00:1c:bf:03:9f:c7</code></p>

<p><strong>一些猜想</strong></p>

<p>如果在本机开始NAT服务</p>

<p>然后通过arp欺骗把对方的网关地址欺骗到自己这里，因为自己这里开了NAT，对方应该也可以上网吧。然后在本地开wireshark抓包，对方就不知不觉的被监视了。这些想法没有测试，不知道这样欺骗的办法，NAT是否可以。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS里的Xen配置pygrub]]></title>
    <link href="http://babodx.github.com/blog/2009/12/21/centos-xen-pygrub/"/>
    <updated>2009-12-21T00:00:00+08:00</updated>
    <id>http://babodx.github.com/blog/2009/12/21/centos-xen-pygrub</id>
    <content type="html"><![CDATA[<p>如果用virt-install生成一台虚拟服务器
在查看配置的时候，会发现已经没有了kernel=这个配置来制定启动内核。而是用了</p>

<p><code>bootloader = '/usr/bin/pygrub'</code></p>

<p>关于这个，可以参考
<a href="http://wiki.xensource.com/xenwiki/PyGrub">http://wiki.xensource.com/xenwiki/PyGrub</a></p>

<p>CentOS 5.3的虚拟化，好像没有了XenU的内核，而是改用了这种新的方式。</p>

<p>反正我用kernel启动失败了。后来用这个方式已经可以正常使用虚拟服务器了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS 5.3 安装虚拟化后的内存识别问题.]]></title>
    <link href="http://babodx.github.com/blog/2009/12/21/centos-xen-memory-problem/"/>
    <updated>2009-12-21T00:00:00+08:00</updated>
    <id>http://babodx.github.com/blog/2009/12/21/centos-xen-memory-problem</id>
    <content type="html"><![CDATA[<p>昨天单位到了2台SUN x4450.</p>

<p><strong>硬件配置相当强力.</strong></p>

<p>CPU 4颗6核的 Intel(R) Xeon(R) CPU           X7460 @ 2.66GHz</p>

<p>系统可以识别出24颗处理器</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@localhost ~]# cat /proc/cpuinfo |grep processor|wc -l
</span><span class='line'>24</span></code></pre></td></tr></table></div></figure>


<p>内存64G</p>

<p>在内存问题上,我郁闷了一阵子.我用dmesg、free、top查看，都是32G</p>

<p>开始以为CentOS 5.3的64位内核就能支持到32G呢。又尝试在启动参数里加mem=64G</p>

<p>又上论坛询问、查看官方文档，都说CentOS 5.3 64bit应该没有内存限制的。</p>

<p>后来我发现了，原来问题出在安装的虚拟化上面</p>

<p>用xm top可以正确识别内存。而且安装的系统，只是当作xm 里面的一个dom0来运行的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS 5.3下成功安装了Xen虚拟化服务。]]></title>
    <link href="http://babodx.github.com/blog/2009/12/21/centos-install-xen/"/>
    <updated>2009-12-21T00:00:00+08:00</updated>
    <id>http://babodx.github.com/blog/2009/12/21/centos-install-xen</id>
    <content type="html"><![CDATA[<p>今天参照下面文档成功安装了虚拟化服务。</p>

<p><a href="http://www.howtoforge.com/paravirtualization-with-xen-on-centos-5.3-x86_64-p2">http://www.howtoforge.com/paravirtualization-with-xen-on-centos-5.3-x86_64-p2</a></p>

<p>并且在虚拟化服务里，安装了一台vm01的虚拟Centos。</p>

<p>不过时间比较长，通过网络安装，用了4个小时。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS 5.3 64bit安装在HP 380G5服务器]]></title>
    <link href="http://babodx.github.com/blog/2009/12/21/centos-5-3-64bit-install-on-hp-380-g5/"/>
    <updated>2009-12-21T00:00:00+08:00</updated>
    <id>http://babodx.github.com/blog/2009/12/21/centos-5-3-64bit-install-on-hp-380-g5</id>
    <content type="html"><![CDATA[<p>今天安装了一台CentOS 5.3 64bit服务器。</p>

<p>服务器硬件HP 380G5，4U高</p>

<ul>
<li>CPU 4核处理器 2颗</li>
<li>内存 4G 硬盘 147G*3</li>
</ul>


<p>安装很顺利，采用server模式，去掉了不用的软件，加入虚拟化。</p>

<p>安装后启动，占用内存在230M左右，感觉比CentOS 4.7高了很多呀。。。我在一台HP 140的1U服务器安装的CentOS 4.7 启动后，只占用29M内存。</p>

<p>内存占用问题，还需要看看具体是什么原因。</p>

<p>测试下性能，我比较喜欢用unixbench测试。</p>

<p><a href="http://www.hermit.org/Linux/Benchmarking/">http://www.hermit.org/Linux/Benchmarking/</a></p>

<p>我这次下载的5.0版本，因为5.1以后支持2D,3D我没有装X11，运行不了。</p>

<p>结果5.0也是运行了一半就出问题了。奇怪呀。</p>

<p>我的一台CentOS 4.4 装在一个双核 Intel(R) Xeon(TM) CPU 2.66GHz，1G内存的机器上。用4.1.0-wht测试，得分只有145.不过是跑着java、tomcat、apache、mysql和vmserver的时候测试的。内存使用400M左右的时候。</p>

<p>我看到网上很多128M的VPS居然也可以得到160多分，真是奇怪呀。而我这台双4核处理器xeon e7320,4G内存，装CentOS的机器，也只有下面的数据</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@moodle unixbench-4.1.0-wht-2]# ./Run
</span><span class='line'>make all
</span><span class='line'>make[1]: Entering directory `/root/unixbench-4.1.0-wht-2'
</span><span class='line'>Checking distribution of files
</span><span class='line'>./pgms exists
</span><span class='line'>./src exists
</span><span class='line'>./testdir exists
</span><span class='line'>./tmp exists
</span><span class='line'>./results exists
</span><span class='line'>make[1]: Leaving directory `/root/unixbench-4.1.0-wht-2'
</span><span class='line'>   #    # #    # # #    #          #####   ###### #    #   ####   #    #&lt;br&gt;
</span><span class='line'>   #    # ##   # #   # #           #    # #       ##   # #    # #    #&lt;br&gt;
</span><span class='line'>   #    # # # # #    ##            #####   #####   # # # #       ######&lt;br&gt;
</span><span class='line'>   #    # # # # #    ##            #    # #       # # # #       #    #&lt;br&gt;
</span><span class='line'>   #    # #   ## #   # #           #    # #       #   ## #    # #    #&lt;br&gt;
</span><span class='line'>    ####   #    # # #    #          #####   ###### #    #   ####   #    #
</span><span class='line'>                 4        1           Based on the Byte Magazine Unix Benchmark
</span><span class='line'>                44       11
</span><span class='line'>   v   v       4 4        1
</span><span class='line'>    v v       44444       1           v4.1 revisions mostly by David C. Niemi,
</span><span class='line'>     v           4   o   111 - WHT.2 Reston, VA, USA niemi@tux.org
</span><span class='line'>WHT Variant by Andy A. Lee andylee@dslextreme.com
</span><span class='line'>See: http://www.webhostingtalk.com/showthread.php?s=&threadid=308055
</span><span class='line'>
</span><span class='line'>Dhrystone 2 using register variables 1 2
</span><span class='line'>Double-Precision Whetstone 1 2
</span><span class='line'>Execl Throughput 1
</span><span class='line'>Filesystem Throughput 1024 bufsize 2000 maxblocks 1
</span><span class='line'>Filesystem Throughput 256 bufsize 500 maxblocks 1
</span><span class='line'>Filesystem Throughput 4096 bufsize 8000 maxblocks 1
</span><span class='line'>Pipe Throughput 1 2
</span><span class='line'>Pipe-based Context Switching 1 2
</span><span class='line'>Process Creation 1
</span><span class='line'>System Call Overhead 1 2
</span><span class='line'>Shell Scripts (8 concurrent) 1
</span><span class='line'>==============================================================
</span><span class='line'>BYTE UNIX Benchmarks (Version 4.1-wht.2)
</span><span class='line'>System -- Linux moodle.ict 2.6.18-128.el5xen #1 SMP Wed Jan 21 11:12:42 EST 2009 x86_64 x86_64 x86_64 GNU/Linux
</span><span class='line'>                     271677672   3293760 254360848   2% /
</span><span class='line'>Start Benchmark Run: Tue Jun 30 06:43:06 CST 2009
</span><span class='line'>06:43:06 up 7:53, 1 user, load average: 0.19, 0.76, 0.81
</span><span class='line'>End Benchmark Run: Tue Jun 30 06:53:17 CST 2009
</span><span class='line'>06:53:17 up 8:03, 1 user, load average: 15.43, 6.42, 3.16
</span><span class='line'>
</span><span class='line'>                     INDEX VALUES
</span><span class='line'>TEST                                        BASELINE     RESULT      INDEX
</span><span class='line'>Dhrystone 2 using register variables        376783.7 19031818.6      505.1
</span><span class='line'>Double-Precision Whetstone                      83.1     1448.6      174.3
</span><span class='line'>Execl Throughput                               188.3     1593.9       84.6
</span><span class='line'>File Copy 1024 bufsize 2000 maxblocks         2672.0   118911.0      445.0
</span><span class='line'>File Copy 256 bufsize 500 maxblocks           1077.0    42442.0      394.1
</span><span class='line'>File Read 4096 bufsize 8000 maxblocks        15382.0   946428.0      615.3
</span><span class='line'>Pipe-based Context Switching                 15448.6   253316.5      164.0
</span><span class='line'>Pipe Throughput                             111814.6 1223105.0      109.4
</span><span class='line'>Process Creation                               569.3     3279.0       57.6
</span><span class='line'>Shell Scripts (8 concurrent)                    44.8      508.7      113.5
</span><span class='line'>System Call Overhead                        114433.5   907496.2       79.3
</span><span class='line'>                                                                 =========
</span><span class='line'>     FINAL SCORE                                                     182.5</span></code></pre></td></tr></table></div></figure>


<p>总分 182.5 真不知都那些VPS测试出 400分的，是什么情况。
难道是可以针对unixbench优化？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的网站开通了，www.xinlogs.com.]]></title>
    <link href="http://babodx.github.com/blog/2009/12/19/startup-xinlogs/"/>
    <updated>2009-12-19T00:00:00+08:00</updated>
    <id>http://babodx.github.com/blog/2009/12/19/startup-xinlogs</id>
    <content type="html"><![CDATA[<p>以前一直在断断续续的写Blog，开始放在百度的空间。网址http://hi.baidu.com/babodx</p>

<p>后来在09年7月，觉得<a href="http://hi.baidu.com/babodx">http://hi.baidu.com/babodx</a>空间的功能太少了，就搬家到了<a href="http://babodx.spaces.live.com">ttp://babodx.spaces.live.com</a>并且注册了xinlogs.com域名。后来就一直关注VPS空间，觉得这个很好，相当于自己有了一台虚拟的服务器，完全可以自己在上面配置各种服务。</p>

<p>于是在2009年12月18日，我终于决定购买了rashost.com的1款128M内存的VPS，位置在美国的洛杉矶机房。</p>

<p>价格还算便宜1个月68元。rashost的有点就是不限制流量，而且CPU采用intel至强的。速度也不错</p>

<p>我选择了CentOS 5.3系统</p>

<p><strong>CPU信息</strong></p>

<p>model name      : Intel(R) Xeon(R) CPU           X3220  @ 2.40GHz</p>

<p><strong>内存信息</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>             total       used       free     shared    buffers     cached
</span><span class='line'>Mem:           128        119          8          0          9         67
</span><span class='line'>-/+ buffers/cache:         42         86
</span><span class='line'>Swap:          255          0        255</span></code></pre></td></tr></table></div></figure>


<p>我的网站采用Nginx+PHP+MySQL+Bo-Blog架设，参考了<a href="www.s135.com">http://www.s135.com/</a>上的优化方法。</p>

<p>后面剩下的工作就是如何将以前blog的文章搬家够来了。。。估计够折腾一阵子的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS虚拟化服务的配置]]></title>
    <link href="http://babodx.github.com/blog/2009/12/19/Centos-Virtualization/"/>
    <updated>2009-12-19T00:00:00+08:00</updated>
    <id>http://babodx.github.com/blog/2009/12/19/Centos-Virtualization</id>
    <content type="html"><![CDATA[<p>单位到了一台sun的x4450服务器，打算开学前部署好虚拟化服务，给每位带学生实训的老师一台虚拟的windows 2003 Server. 大约需要20台虚拟服务器</p>

<h2>服务器介绍</h2>

<p><img src="http://farm9.staticflickr.com/8390/8509308054_d3488a134d_z.jpg" alt="Sun Fire X4450 Server" /></p>

<ul>
<li>硬件配置：</li>
<li>CPU: 4颗 Intel(R) Xeon(R) CPU           X7460  @ 2.66GHz   (每颗6核心，供24核心)</li>
<li>内存: 64G</li>
<li>硬盘: 8块 Vendor: HITACHI   Model: H101414SCSUN146G  Rev: SA25</li>
</ul>


<h2>虚拟方案</h2>

<p>用CentOS 5.3 64bit 作为DOM0，来管理整个虚拟化服务。然后采用hvm方式虚拟20台Windows server 2003。</p>

<h2>虚拟服务器配置：</h2>

<ul>
<li>CPU：1颗</li>
<li>内存：1G</li>
<li>硬盘：30G</li>
</ul>


<p>整体结构如下</p>

<p><img src="http://farm9.staticflickr.com/8243/8508488101_df918b53e0.jpg" alt="虚拟化整体结构" /></p>

<p>在SunFire X4450的硬件上，安装Xen虚拟化服务。所有硬件由Xen内核管理，我们的CentOS 5.3 64bit操作系统跑在Xen内核上面，负责管理以后创建的DOM1到DOMN的多个虚拟服务器。</p>

<h2>虚拟化服务的安装</h2>

<p>这个就不具体写了，可以参考我前面的blog或者http://www.howtoforge.com/paravirtualization-with-xen-on-centos-5.3-x86_64-p2</p>

<p>如果不安装图形界面，在用virt-install安装windows操作系统的时候，需要VNC服务。这样可以远程通过VNC客户端连接来安装，因为ssh的方式没有图形界面。
如果安装了图形界面的CentOS，就很容易了。直接用图形界面的虚拟机管理程序安装即可。</p>

<h2>GUESTOS的配置</h2>

<p>由于每台虚拟服务器安装后，并没有开启远程服务，所以我们还是需要通过VNC连接登入虚拟服务器。在配置好IP和远程服务后，就可以使用远程桌面登陆了。
在每台虚拟服务器的配置文件里，加入如下语句</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vnc = 2
</span><span class='line'>vncunused = 2
</span><span class='line'>vnclisten = "10.10.15.151"
</span><span class='line'>vncpasswd = "password" </span></code></pre></td></tr></table></div></figure>


<p><strong>注意：</strong> password为登陆vnc的密码，根据实际情况设置。vnclisten设置的是主机CentOS的IP</p>

<p><strong>突破8台虚拟服务器的限制</strong></p>

<p>默认安装后，CentOS的max_loop最大值是8，这样我们默认只能启动8个虚拟服务器（不过半虚拟的linux好像不受这个影响）
我们需要修改这个参数</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rmmod loop 
</span><span class='line'>echo "options loop max_loop=64"&gt;/etc/modprobe.d/loop 
</span><span class='line'>modprobe loop </span></code></pre></td></tr></table></div></figure>


<p>这样就可以了。</p>

<h2>配置网络</h2>

<p>我的服务器是有4块网卡 eth0、eth1、eth2、eth3</p>

<p>我打算eth0 采用10.10.15.151 ip地址，其他网卡不设置IP地址并且将/etc/sysconfig/network-scripts/下对应的脚本文件修改如下</p>

<p><code>ONBOOT=no</code></p>

<p>这样可以让系统启动后，就eth0可以用来访问。其他网卡都没有对应ip地址</p>

<p>其他网卡的作用是留给虚拟服务器用的。我们通过修改xen的配置文件，让eth0到eth1绑定到xenbr0到xenbr3上面。然后20台服务器，10台通过xenbr1访问网络，10台通过xenbr2访问
在rc.local文件里，添加</p>

<p><code>/etc/xen/scripts/new-bridge start</code></p>

<p>new-bridge是我们自己写的脚本文件，为了创建xenbr0到xenbr3。xen系统默认就创建一个xenbr0</p>

<p>new-bridge文件内容如下</p>

<p><code>vi /etc/xen/scripts/new-bridge</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/sh
</span><span class='line'># Exit if anything goes wrong.
</span><span class='line'>set -e 
</span><span class='line'># First arg is the operation.
</span><span class='line'>OP=$1
</span><span class='line'>shift 
</span><span class='line'>script=/etc/xen/scripts/network-bridge.xen 
</span><span class='line'>case ${OP} in
</span><span class='line'>start)
</span><span class='line'>          $script start vifnum=0 bridge=xenbr0 netdev=eth0
</span><span class='line'>          $script start vifnum=1 bridge=xenbr1 netdev=eth1
</span><span class='line'>          $script start vifnum=2 bridge=xenbr2 netdev=eth2
</span><span class='line'>          $script start vifnum=3 bridge=xenbr3 netdev=eth3
</span><span class='line'>#         $script start vifnum=2 bridge=xenbri netdev=dummy0
</span><span class='line'>          ;; 
</span><span class='line'>stop)
</span><span class='line'>          $script stop vifnum=0 bridge=xenbr0 netdev=eth0
</span><span class='line'>          $script stop vifnum=1 bridge=xenbr1 netdev=eth1
</span><span class='line'>          $script stop vifnum=2 bridge=xenbr2 netdev=eth2
</span><span class='line'>          $script stop vifnum=3 bridge=xenbr3 netdev=eth3
</span><span class='line'>#         $script stop vifnum=2 bridge=xenbri netdev=dummy0
</span><span class='line'>          ;; 
</span><span class='line'>status)
</span><span class='line'>          $script status vifnum=0 bridge=xenbr0 netdev=eth0
</span><span class='line'>          $script status vifnum=1 bridge=xenbr1 netdev=eth1
</span><span class='line'>          $script status vifnum=2 bridge=xenbr2 netdev=eth2
</span><span class='line'>          $script status vifnum=3 bridge=xenbr3 netdev=eth3
</span><span class='line'>#         $script status vifnum=2 bridge=xenbri netdev=dummy0
</span><span class='line'>         ;; 
</span><span class='line'>*)
</span><span class='line'>          echo 'Unknown command: ' ${OP}
</span><span class='line'>          echo 'Valid commands are: start, stop, status'
</span><span class='line'>          exit 1
</span><span class='line'>esac</span></code></pre></td></tr></table></div></figure>


<p>安装xen-shell，让用户自己管理自己的虚拟服务器</p>

<p>具体安装步骤就不写了，参考我前面的文章吧</p>

<h2>安装和使用xen-shell</h2>

<p>或者</p>

<p>http://www.xen-tools.org/software/xen-shell/install.html</p>

<p><strong>注意</strong>
安装这个，需要screen这个软件，可以通过yum install screen安装</p>

<p>再有就是需要/etc/xen/下面的虚拟机配置文件有对应的权限</p>

<p>安装后，用root用户，直接输入xen-shell看看能不能进入，如果报错，根据提示修改。</p>

<p>全部安装完成后，让我们看看20台虚拟服务器跑起来的效果</p>

<p><img src="http://farm9.staticflickr.com/8531/8509667010_2b76c157b2_z.jpg" alt="xen效果图" />
<img src="http://farm9.staticflickr.com/8088/8508563965_7d284d04c4.jpg" alt="xen效果图" />
再来看看网络的使用情况</p>

<p><img src="http://farm9.staticflickr.com/8111/8509671352_bd087337dd.jpg" alt="网络使用情况" /></p>

<p>通过上面的brctl show可以清楚的看到，虚拟服务器的网卡，都放到了xenbr1和xenbr2下面了。</p>

<p>再来看看vnc登陆的界面，注意VNC登陆后，不能直接用键盘的Ctrl+Alt+Del登陆，我们可以通过右键点窗口来选择Send Ctrl+Alt+Del来实现发送这三个按键消息。</p>

<p><img src="http://farm9.staticflickr.com/8513/8508569279_fab2c10e80_z.jpg" alt="windows图片" /></p>

<p>配置好虚拟服务器的IP和远程桌面后，我们就可以采用远程桌面连接了。</p>

<p>用户自己管理自己的服务器</p>

<p>其实有了远程桌面，用户就可以通过这个登陆服务器，重启和修改配置了。但是如果关机以后，就没有办法开机了。</p>

<p>我们安装xen-shell就能实现用户自己通过用户名和密码登陆命令行格式的界面来启动服务器。</p>

<p>首先我们要给我们每台虚拟服务器建立一个CentOS系统上的用户，让后按照Xen-shell的要求配置，这个不具体介绍了，参考</p>

<p>安装和使用xen-shell</p>

<p>或者</p>

<p>http://www.xen-tools.org/software/xen-shell/install.html</p>

<p>后用户就可以通过putty登陆到自己的虚拟服务器管理命令行了。</p>

<p>xen-shell可以让用户自己启动、重启、关闭虚拟服务器，还可以查看虚拟服务器的状态、运行时间等。
如果在用户对应目录下编写好image.sh文件，还可以让用户自己rebuild操作系统。
有了这个，基本管理员告诉用户他的xen-shell用户，虚拟服务器的ip就ok了。其他的用户自己都可以管理了。</p>

<h2>其他问题</h2>

<p>如何让guestos随主系统自动启动，这个可以参考xen文档。</p>

<p>如何克隆guestos系统，这个可以参考virt-clone</p>

<p>如何安装多个linxu guest系统，这个可以参考获取XEN guestOS的images文件</p>

<p>整个安装断断续续弄了大约2周，目前总算ok了。</p>
]]></content>
  </entry>
  
</feed>
