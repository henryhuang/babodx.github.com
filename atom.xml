<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[鑫的方向]]></title>
  <link href="http://babodx.github.com/atom.xml" rel="self"/>
  <link href="http://babodx.github.com/"/>
  <updated>2013-02-27T08:21:06+08:00</updated>
  <id>http://babodx.github.com/</id>
  <author>
    <name><![CDATA[babodx]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[git-first-on-ubuntu]]></title>
    <link href="http://babodx.github.com/blog/2013/02/24/git-first-on-ubuntu/"/>
    <updated>2013-02-24T08:29:00+08:00</updated>
    <id>http://babodx.github.com/blog/2013/02/24/git-first-on-ubuntu</id>
    <content type="html"><![CDATA[<h1>ubuntu 12.10下初次使用git</h1>

<p>前些时候在mac下面使用了git，感觉很棒。今天在单位安装了一台ubuntu 12.10的桌面系统，也开始尝试用git的方式来写blog。</p>

<h2>安装</h2>

<p>ubuntu下面安装git非常容易。</p>

<pre><code>sudo apt-get install git-core
</code></pre>

<p>然后对git进行全局设置</p>

<pre><code>git config user.name "yourname"
git config user.email "youremail"
</code></pre>

<p>设置后用下面命令可以查看</p>

<pre><code>git config -l
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我2013年学习列表]]></title>
    <link href="http://babodx.github.com/blog/2013/02/20/wo-2013nian-xue-xi-lie-biao/"/>
    <updated>2013-02-20T13:55:00+08:00</updated>
    <id>http://babodx.github.com/blog/2013/02/20/wo-2013nian-xue-xi-lie-biao</id>
    <content type="html"><![CDATA[<h1>2013学习计划</h1>

<p>2012年开始了，这一年打算好好学习下ruby、python两种语言和rails框架。</p>

<!--more-->


<h2>学习内容列表</h2>

<h3>ruby</h3>

<p>打算通过阅读图书和在线学习两种方式来学习ruby。</p>

<p>图书主要就是一本手边的<strong>Programming ruby 2nd</strong></p>

<p>在线学习倒是有不少好的资源</p>

<ul>
<li><a href="http://rubymonk.com">rubymonk</a></li>
<li><a href="http://www.codeschool.com">codeschool</a></li>
<li><a href="http://teamtreehouse.com/">teamtreehouse</a></li>
</ul>


<h3>python</h3>

<p>python主要是通过阅读<strong>Python基础教程 第2版</strong></p>

<h3>rails</h3>

<p>主要通过一下网站来学习了</p>

<ul>
<li><a href="http://ruby-china.org">ruby-china</a></li>
<li><a href="http://happycasts.net">happycasts</a></li>
<li><a href="http://railscasts-china.com/">railscasts-china</a></li>
<li><a href="http://www.codeschool.com">codeschool</a></li>
<li><a href="http://teamtreehouse.com/">teamtreehouse</a></li>
</ul>


<h2>希望可以尽快入门rails开发</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开始使用octopress]]></title>
    <link href="http://babodx.github.com/blog/2013/02/13/kai-shi-shi-yong-octopress/"/>
    <updated>2013-02-13T14:54:00+08:00</updated>
    <id>http://babodx.github.com/blog/2013/02/13/kai-shi-shi-yong-octopress</id>
    <content type="html"><![CDATA[<h1>概述</h1>

<p>最近在看<a href="http://ruby-china.org">ruby-china.org</a>和<a href="http://happycasts.net">happycasts.net</a>的视频。开始尝试使用git来做版本控制。原来都是使用svn，所以最近一直在折腾和学习。看到很多编程人员都开始采用octopress来代替wordpress写blog了。我也开始尝试使用这个octopress的blog系统。</p>

<p>octopress是一套基于ruby构建的blog管理系统，通过git来为我们的文章做版本控制，并且通过rake命令可以简单的完成博客的发布与远程站点的同步。配合github提供的pages功能，我们连自己的主机都可以省了。非常方便。</p>

<!--more-->


<h2>新建文章</h2>

<p>写文章只要进入到我们的octopress目录下，输入下面命令就可以创建一个新的blog文章。</p>

<pre><code>rake new_post\[title\]
</code></pre>

<p>其中title就是你文章的标题，可以根据自己实际情况填写。</p>

<h2>写文章</h2>

<p>我们创建的文章会保存在下面的目录内</p>

<pre><code>~/project/octopress/source/_posts
</code></pre>

<p>文件名为我们创建时候的日期-title.markdown的形式，中文的title会自动转为拼音。例如我这篇文章的名字就如下所示</p>

<pre><code>2013-02-13-kai-shi-shi-yong-octopress.markdown
</code></pre>

<p>我们只需要用我们熟悉的编辑器打开这个.markdown文件来写我们的文章就可以了。而文章的写作采用markdown语言。这个语言也是我最近才接触的，感觉非常容易上手，可以说完全是为了写作而诞生的。可以让我们愉快的写作，而不是考虑用什么字体，用什么格式，怎么对齐等问题。</p>

<p>有了这个很好的开始，后面就是慢慢学习octopress的技巧和markdown的各种语法了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[有想恶补三角函数的冲动！]]></title>
    <link href="http://babodx.github.com/blog/2009/12/21/wow-xyz/"/>
    <updated>2009-12-21T00:00:00+08:00</updated>
    <id>http://babodx.github.com/blog/2009/12/21/wow-xyz</id>
    <content type="html"><![CDATA[<p>最近在咕哝魔兽世界的坐标系统，发现这个游戏的坐标系统如下图所示</p>

<p><img src="http://farm9.staticflickr.com/8228/8510673160_84e4f8b348.jpg" alt="wow坐标系统" /></p>

<p>游戏的平面坐标为X,Y,用2π代表360度的方向。Z为高度，我们可以不用考虑。现在如果我们知道A点坐标X=2,Y=2 ，B点坐标X=4,Y=3那要想从A点出发到B点，我们的方向应该是多少呢？(目前我就知道Y轴正方向的话，角度为0 。X轴正方向 为π/4=90度)该怎么写这个三角函数得到这个角的的数值呢？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TBC 2.3如何挂战场]]></title>
    <link href="http://babodx.github.com/blog/2009/12/21/wow-robot-battlegroud/"/>
    <updated>2009-12-21T00:00:00+08:00</updated>
    <id>http://babodx.github.com/blog/2009/12/21/wow-robot-battlegroud</id>
    <content type="html"><![CDATA[<p>目前TBC 2.3了，荣誉又开始有用处了，可以购买S1装备。但是如何挂战场呢？毕竟不是每个人都能不上班，每天玩10个小时。。。我目前的办法是使用国外开发的一款练级外挂glider，再配合一个自己些的程序和修改过的一个插件来实现的。glider可以控制人物按照设定的线路跑动和打怪。我用c#些一个程序，来监控着角色，如果死亡了，就停止wowglider，等待复活。如果复活了，就开glider。战斗结束了，就点npc排队。然后用我写的插件回答GM问题。。。。总之还算可以吧。用了大约1-2个晚上也业余时间解决的。c#确实使用起来很简单，至少之前我没有用过c#。但写个简单的网络程序，负责控制其它程序，实现起来很容易。基本都是采用TcpClient类，就可以了<a href="http://www.pvpbot.com/">www.pvpbot.com</a>也是个选择，但是收费比较贵。其实可以考虑用c#写个简单的web服务器，通过dns欺骗，来对pvpbot的bgtool做本地验证。关于pvpbot的验证，确实不怎么好。至少我用了不到1个小时抓包，分析和测试。已经可以本地验证了，不过懒得写个简单web服务器实现验证了。（以前没有写过，还要查资料。。）关于网络验证，glider做的就比较好。我觉得至少要对时间和硬件编号和用户名同时加密发送到服务器。然后再服务器验证后，对那个时间和是否验证通过等信息再加密，大乱顺序后发送回来。这样就算抓包，因为每次发送的时间不同，每次抓到的信息也不同。如果不知道算法，很难实现本地验证。不过c#的代码保护太差，反编译后和看源代码差不多。。。。。。这个很难解决。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修改了一个大战场团排插件 TeamQueue 1.35]]></title>
    <link href="http://babodx.github.com/blog/2009/12/21/wow-plugin-teamqueue/"/>
    <updated>2009-12-21T00:00:00+08:00</updated>
    <id>http://babodx.github.com/blog/2009/12/21/wow-plugin-teamqueue</id>
    <content type="html"><![CDATA[<p>为了让插件排队速度更快.只要和大战场军官对话,就自动进入到&#8221;首先可用&#8221;界面等待队长排队了.</p>

<p><a href="http://bbs.game.mop.com/viewthread.php?tid=1544817&amp;extra=page%3D1">插件下载</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[魔兽世界内存分析，基于wow 2.4.2]]></title>
    <link href="http://babodx.github.com/blog/2009/12/21/wow-memory-tools/"/>
    <updated>2009-12-21T00:00:00+08:00</updated>
    <id>http://babodx.github.com/blog/2009/12/21/wow-memory-tools</id>
    <content type="html"><![CDATA[<p>今天基于wow 2.4.2分析了下魔兽世界的内存，并做了如下软件。</p>

<p><img src="http://farm9.staticflickr.com/8227/8509559819_61b2546573.jpg" alt="wow外挂" /></p>

<p>全部采用C#编写，实现如下功能加速3.5%.&#8211;（这个服务器有限制，超过4%就掉线）。这个加速是修改人物速度出来的，和那些变速齿轮不一样。这样修改后，别人看你的速度也是正常的，就好像你穿了加速的鞋子一样。无阻力爬山&#8211;只要不是90度的山，多陡都能爬上去。超级跳&#8211;可以让跳跃的高度自己设置Z+&#8211;直接传送到任意高度目前就分析出来了这些，其实这些小功能只能自己在副本娱乐下。估计出了副本。。大街上没有人敢用。呵呵主要锻炼下自己对C#实现内存读写，还有就是分析内存的基地址和最终目的地址。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5v5打到1600+了，庆祝一下！]]></title>
    <link href="http://babodx.github.com/blog/2009/12/21/wow-5v5/"/>
    <updated>2009-12-21T00:00:00+08:00</updated>
    <id>http://babodx.github.com/blog/2009/12/21/wow-5v5</id>
    <content type="html"><![CDATA[<p>今天5v5我们上1600了。庆祝下。</p>

<p><img src="http://farm9.staticflickr.com/8527/8509573735_f7c64d2b5c_z.jpg" alt="wow 5v5" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntu 8.10下同步wm6.1手机]]></title>
    <link href="http://babodx.github.com/blog/2009/12/21/winphone-SynceWithUbuntu/"/>
    <updated>2009-12-21T00:00:00+08:00</updated>
    <id>http://babodx.github.com/blog/2009/12/21/winphone-SynceWithUbuntu</id>
    <content type="html"><![CDATA[<p>参考了</p>

<ul>
<li><a href="http://www.synce.org/moin/SynceWithUbuntu">http://www.synce.org/moin/SynceWithUbuntu</a></li>
<li>http://hi.baidu.com/john_zhy/blog/item/50e39f317240141febc4af5a.html</li>
</ul>


<p>我的本本 IBM R61</p>

<p>系统 ubuntu 8.10从 8.04升级上来的。</p>

<p>手机 eten X800 wm6.1英文系统</p>

<p>原来一直不能在ubuntu下面同步手机资料，昨天参考了上面两个帖子，最后成功了。</p>

<p>1、首先添加源</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo gedit   /etc/apt/sources.list</span></code></pre></td></tr></table></div></figure>


<p>在末尾添加</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>deb &lt;a href="http://ppa.launchpad.net/synce/ubuntu" target="_blank"&gt;http://ppa.launchpad.net/synce/ubuntu&lt;/a&gt; hardy main
</span><span class='line'>
</span><span class='line'>deb-src &lt;a href="http://ppa.launchpad.net/synce/ubuntu" target="_blank"&gt;http://ppa.launchpad.net/synce/ubuntu&lt;/a&gt; hardy main</span></code></pre></td></tr></table></div></figure>


<p>保存，关闭</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get update</span></code></pre></td></tr></table></div></figure>


<p>我没有更新源，但是也成功。可能是8.10的缘故</p>

<p>2、更新usb驱动（仅内核在2.6.24-19之前的，如果比这个新请跳过本步骤）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo rmmod rndis_host cdc_ether usbnet
</span><span class='line'>sudo rm /lib/modules/`uname -r`/kernel/drivers/net/usb/{rndis_host,cdc_ether,usbnet}.ko
</span><span class='line'>sudo apt-get install usb-rndis-source cdbs
</span><span class='line'>sudo module-assistant auto-install usb-rndis
</span><span class='line'>sudo apt-get install synce-hal librra0-tools librapi2-tools</span></code></pre></td></tr></table></div></figure>


<p>因为我的内核是2.6.27-7的，所以跳过了这步。但是我安装了后面的软件包</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install synce-hal librra0-tools librapi2-tools</span></code></pre></td></tr></table></div></figure>


<p>3、安装<strong>SynCE-GNOME</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install python-setuptools</span></code></pre></td></tr></table></div></figure>


<p> 下载<a href="http://downloads.sourceforge.net/synce/synce-gnome-0.11.tar.gz">synce-gnome-0.11.tar.gz</a></p>

<p> 解压，在终端进入其目录，运行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>python setup.py build
</span><span class='line'>sudo python setup.py install</span></code></pre></td></tr></table></div></figure>


<p>安装<strong>notification-daemon</strong>（如果没有安装过的话，用新得立软件包管理器搜索一下就可以了）</p>

<p>这个步骤完全做了一次，notification-daemon系统已经安装过了</p>

<p>4、连接好手机，运行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/sbin/ifconfig -a | grep 80:00:60:0f:e8:00   | cut -d " " -f 1</span></code></pre></td></tr></table></div></figure>


<p>记下他输出的东西</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo gedit   /etc/network/interfaces</span></code></pre></td></tr></table></div></figure>


<p>在末尾添加<code>iface &lt;rndis0&gt; inet dhcp</code></p>

<p>ps:&#8221;&lt;>&#8221;里面的是我在上面那步里输出的，你应该更换成你自己的，不带“&lt;>“ 保存并关闭，然后运行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo /etc/init.d/networking restart</span></code></pre></td></tr></table></div></figure>


<p>这次也是按照作的，我的网卡是多出来一个eth1(这个根据自己系统决定)。所以我在interfaces文件后面加入了</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>iface eth1 inet dhcp</span></code></pre></td></tr></table></div></figure>


<p>5、安装OpenSync</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install multisync-tools opensync-plugin-evolution opensync-plugin-synce</span></code></pre></td></tr></table></div></figure>


<p>6、现在该安装的都安装好了，就可以开始同步了<code>synce-sync-engine</code>如果出现如下错误</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>File "/usr/bin/sync-engine", line 84, in &lt;module&gt;
</span><span class='line'>
</span><span class='line'> configObj = Config.Config(progopts)
</span><span class='line'>
</span><span class='line'>   File "/usr/lib/python2.5/site-packages/SyncEngine/config.py", line 292, in __init__
</span><span class='line'>
</span><span class='line'> oldconf = os.path.join(self.path,"config.xml")
</span><span class='line'>
</span><span class='line'>AttributeError: Config instance has no attribute 'path'
</span></code></pre></td></tr></table></div></figure>


<p>请下载<a href="http://synce.svn.sf.net/svnroot/synce/releases/0.11.1/sync-engine/config/config.xml">config.xml</a>，保存为~/.synce/config.xml（提示：&#8221;~&#8221;为自己的家目录)</p>

<p>创建同步项目<strong>synce-create-partnership &#8220;Linux desktop&#8221; &#8220;Contacts,Calendar&#8221;</strong></p>

<p>ps：还有别的，可自行选择Contacts， Calendar， Tasks， Files 等</p>

<p>创建OpenSync group</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msynctool --addgroup synce-sync
</span><span class='line'>
</span><span class='line'>msynctool --addmember synce-sync synce-opensync-plugin
</span><span class='line'>
</span><span class='line'>msynctool --addmember synce-sync evo2-sync</span></code></pre></td></tr></table></div></figure>


<p>然后同步synce-sync-engine</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msynctool --sync synce-sync</span></code></pre></td></tr></table></div></figure>


<p>他会同步到evolution里面</p>

<p>我上面的照着做，全部成功了。</p>

<p><strong>我的一些问题</strong></p>

<p>据说安装了synce-gnomevfs后，可以在Nautilus里面看手机里的内容，但是我没有成功
目前只能通过synce-pls、synce-pcp等命令，来操作手机里面文件。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[试用ubuntu 8.04和LVM动态增加分区]]></title>
    <link href="http://babodx.github.com/blog/2009/12/21/ubuntu-dynamic-resize-lvm/"/>
    <updated>2009-12-21T00:00:00+08:00</updated>
    <id>http://babodx.github.com/blog/2009/12/21/ubuntu-dynamic-resize-lvm</id>
    <content type="html"><![CDATA[<p>我在虚拟机VMware里面安装了ubuntu 8.04.</p>

<p>安装的时候，只是选择了openssh这个服务。安装后感觉系统很干净</p>

<p><strong>磁盘占用</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/dev/mapper/ubuntu-root                      5.6G 321M 5.3G   6% /</span></code></pre></td></tr></table></div></figure>


<p>系统就用了不到400M</p>

<p><strong>内存</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>                   total       used       free     shared    buffers     cached
</span><span class='line'>Mem:           249         39        209          0          3         16</span></code></pre></td></tr></table></div></figure>


<p>减掉buffers和cached的内容，还有我ssh远程连接的占用。实际系统启动后内存也就需要17M</p>

<p><strong>LVM</strong></p>

<p>安装系统的时候，我就选择了整个磁盘启用LVM，采用ubuntu默认分区的方式。</p>

<p>ubuntu默认分了2个区/sda1和/sda5。sda1用来做/boot，sda5用来做LVM。文件系统都是默认的ext3。</p>

<p>然后在LVM里面默认建立了2个LV( Logical volume)，一个/dev/ubuntu/root用来做/ ，一个/dev/ubuntu/swap_1用来做swap交换分区。我又手动修改了文件系统，采用reiserfs。</p>

<p><strong>动态添加/分区大小</strong></p>

<p>我先添加了一个硬盘，系统识别为sdb</p>

<p>对这个盘<strong>创建分区</strong>（LVM可以不用分区的，但是需要动态添加到/分区，所以需要有文件系统，不能添加后格式化/分区吧）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo fdisk /dev/sdb
</span><span class='line'>n --&gt;创建分区
</span><span class='line'>t --&gt;修改分区类型为8e
</span><span class='line'>w --&gt;保存结果</span></code></pre></td></tr></table></div></figure>


<p>现在系统可以识别/dev/sdb1这个设备了。</p>

<p><strong>创建PV(Physical volume)</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo pvcreate /dev/sdb1</span></code></pre></td></tr></table></div></figure>


<p><strong>创建VG(Volume group)</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo vgextend ubuntu /dev/sdb1</span></code></pre></td></tr></table></div></figure>


<p><strong>扩展LV(Logical volume)</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo lvextend -L +2G /dev/ubuntu/root&lt;br&gt;</span></code></pre></td></tr></table></div></figure>


<p>这样就给/dev/ubuntu/root这个设备大小增加了2G。可以通过sudo lvdisply查看
但是这个时候df -h还是没有变化的，需要调整文件系统。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo resize_reiserfs -s +2G /dev/ubuntu/root&lt;br&gt;</span></code></pre></td></tr></table></div></figure>


<p>这样就完成了全部动态扩展分区。而且是服务器一直在线状态，不用关机。</p>

<p>调整Swap</p>

<p>还是和上面一样的情景，只要VG里面还有剩余空间就可以用来扩展swap用。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo swapoff -a</span></code></pre></td></tr></table></div></figure>


<p>关闭正在用的swap分区</p>

<p>然后</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo lvextend -L +200M /dev/ubuntu/swap_1</span></code></pre></td></tr></table></div></figure>


<p>给/dev/ubuntu/swap_1扩展了200M容量</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo mkswap /dev/ubuntu/swap_1</span></code></pre></td></tr></table></div></figure>


<p>建立swap的文件系统</p>

<p>最后</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo swapon -a</span></code></pre></td></tr></table></div></figure>


<p>启用新的swap系统。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntu 8.04升级到8.10]]></title>
    <link href="http://babodx.github.com/blog/2009/12/21/ubuntu-804-update-to-810/"/>
    <updated>2009-12-21T00:00:00+08:00</updated>
    <id>http://babodx.github.com/blog/2009/12/21/ubuntu-804-update-to-810</id>
    <content type="html"><![CDATA[<h1>升级</h1>

<p>昨天开始作的升级。</p>

<p>早上到单位，就开始<code>Alt+F2</code></p>

<p>在弹出的命令行窗口输入
<code>update-manager -d</code></p>

<p>然后就进入了漫长的等待，单位网络那个垃圾。。。。。告诉我42天。。。。。</p>

<p>一直到下班，下载了900多个文件，一共要下载1300多</p>

<p>晚上到家继续update-manager -d 发现居然可以接着下载，还以为要重新来呢。家里好点，告诉我3个小时,后来就睡觉了。</p>

<p>今天早上起来，发现已经下载完成了，开始到安装更新这一步了，弹出个窗口等我确认。</p>

<p>我点上开始，就洗漱去了。一直到要上班也没有安装完成。（TMD，居然忘记今天星期五，不能开车。还是老婆提醒我，才想起来。）这次我可不敢关机了，怕升级一半，下次进不来系统。直接把本本和上盖子放包里了，下楼打车上班。</p>

<p>在出租车里，完成了全部更新。关机。</p>

<p><strong>启动</strong></p>

<p>到了单位，发现系统总卡在进度条进不去。</p>

<p>按Alt+F1然后 Alt+F8查看下文字模式的启动信息，发现一直卡在*Configuring network interfaces&#8230;</p>

<p>这个第一次启动，没有办法（希望有好办法的，告诉下。）我就一直死等呀。。。感觉过了20分钟？？？</p>

<p>进入系统了，3D显卡驱动不行。运行uname -a查看，内核还在用8.04的2.6.24-21.</p>

<p>先修改网络吧
<code>sudo gedit /etc/network/interfaces</code></p>

<p>将里面的</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>auto eth0
</span><span class='line'>iface eth0 inet dhcp
</span><span class='line'>auto lo
</span><span class='line'>auto wlan0</span></code></pre></td></tr></table></div></figure>


<p>都注释掉，变成下面样子</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#auto lo
</span><span class='line'>iface lo inet loopback
</span><span class='line'>#iface eth0 inet dhcp
</span><span class='line'>address 10.11.10.164
</span><span class='line'>netmask 255.255.255.0
</span><span class='line'>gateway 10.11.10.254
</span><span class='line'>#nameserver 202.106.0.20
</span><span class='line'>#auto eth0
</span><span class='line'>iface wlan0 inet dhcp
</span><span class='line'>wpa-psk 7640768b3d6b31f834b63abc8d2d667ae10f8bc3c41a8e4e87ec2c104d963a1e
</span><span class='line'>wpa-driver wext
</span><span class='line'>wpa-key-mgmt WPA-PSK
</span><span class='line'>wpa-proto WPA
</span><span class='line'>wpa-ssid babohome
</span><span class='line'>#auto wlan0</span></code></pre></td></tr></table></div></figure>


<p>接着修改/etc/NetworkManager/nm-system-settings.conf文件
<code>sudo gedit /etc/NetworkManager/nm-system-settings.conf</code></p>

<p>将文件里的<code>[ifupdown] manager=false</code>改成<code>[ifupdown] manager=true</code></p>

<p>这样基本启动速度的问题就正常</p>

<p><strong>内核</strong></p>

<p>再来说内核</p>

<p>内核需要手动编辑下grub的启动配置文件了。其实2.6.27-7内核已经安装了，就是没有给我们加入的menu.lst文件里面。修改menu.lst</p>

<p><code>sudo gedit /boot/grub/menu.lst</code></p>

<p>我的修改如下，这个应该每个人的不太一样。大家可以拷贝以前自己的文件进行修改</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>title        Ubuntu 8.04.1, kernel 2.6.27-7-generic
</span><span class='line'>root        (hd0,1)
</span><span class='line'>kernel        /boot/vmlinuz-2.6.27-7-generic root=UUID=614a1c10-6ed3-45c9-b24d-f7b3e39725b2 ro quiet splash locale=zh_CN
</span><span class='line'>initrd        /boot/initrd.img-2.6.27-7-generic
</span><span class='line'>quiet
</span><span class='line'>title        Ubuntu 8.04.1, kernel 2.6.27-7-generic (recovery mode)
</span><span class='line'>root        (hd0,1)
</span><span class='line'>kernel        /boot/vmlinuz-2.6.27-7-generic root=UUID=614a1c10-6ed3-45c9-b24d-f7b3e39725b2 ro single
</span><span class='line'>initrd        /boot/initrd.img-2.6.27-7-generic</span></code></pre></td></tr></table></div></figure>


<p>这个修改后，先不要重新启动。因为我们还没有卸载显卡驱动，要不重启后，卸载驱动还要继续重启。</p>

<p><strong>卸载现有的显卡驱动</strong></p>

<p>我原来显卡驱动是用envyng -t来安装的，现在还用这个工具卸载</p>

<p>在终端<code>envyng -t</code></p>

<p>然后选卸载驱动，安后等卸载完成后，重启就ok了</p>

<p><strong>安装显卡驱动</strong></p>

<p>注意，如果内核还是2.6.24-21，新的驱动安装不上。</strong>这次我没有用envyng -t来安装，而是用系统->系统管理->硬件驱动来安装的</p>

<p>推荐我的是nvidia 177.80的驱动</p>

<p>等待安装完成后。 Ctrl+Alt+Backspace 重新启动X server</p>

<p>一切ok</p>

<p><strong>一些问题</strong>
在启动过程中，发现samba deamon启动fail还没有看是什么原因。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学习Ruby中......]]></title>
    <link href="http://babodx.github.com/blog/2009/12/21/study-ruby-1/"/>
    <updated>2009-12-21T00:00:00+08:00</updated>
    <id>http://babodx.github.com/blog/2009/12/21/study-ruby-1</id>
    <content type="html"><![CDATA[<h4>学习Ruby中&#8230;&#8230;</h4>

<p>终于拿到了Programming Ruby 中文第2版.开始认真学习Ruby</p>

<p>不过感觉翻译的不是很好</p>

<p>而且有网友已经整理了勘误表
<a href="http://blogs.sun.com/yongsun/entry/programming_ruby_%C3%A7%C2%AC%C2%AC%C3%A4%C2%BA%C2%8C%C3%A7%C2%89%C2%88_%C3%A4%C2%B8%C2%AD%C3%A6%C2%96%C2%87%C3%A7%C2%89%C2%88_%C3%A5%C2%8B%C2%98%C3%A8%C2%AF%C2%AF">http://farm9.staticflickr.com/8527/8509573735_f7c64d2b5c_z.jpg</a></p>

<p>我在阅读的时候,也发现了一些翻译的不是很明白的地方</p>

<ul>
<li><p>16页 第2章 2.3</p></li>
<li><p>Ruby的数组(arrays)和散列表(hashes)是被索引的收集.(indexed collections)</p></li>
</ul>


<p>原文:Ruby&#8217;s arrays and hashes are indexed collections</p>

<p>我感觉这句话的意思应该是说:Ruby的数组和哈希表是有(被)索引的集合</p>

<p>在后面的哈希表里面,也有讲解</p>

<p>Hashes (some times known as associative arrays, maps,or dictionaries) are similar to arrays in that they are indexed collections of object references.
哈希表(有时也称关系数组,映射或者词典) 和数组的相似之处是他们都是有(被)索引的对象引用的集合</p>

<ul>
<li>45页 第4章 4.1 倒数第8行</li>
</ul>


<p>使用这些方法,你可以用数组来实现栈(stack),收集(set),队列(queue),双向队列(dequeue)和先进先出队列(fifo)</p>

<p>原文:Using these,you can treat arrays as stacks,sets,queues,dequeues,and fifos</p>

<p>我感觉这里的set应该是集合,就是说可以用数组实现集合</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails下使用sqlite3]]></title>
    <link href="http://babodx.github.com/blog/2009/12/21/rails-use-sqlite3/"/>
    <updated>2009-12-21T00:00:00+08:00</updated>
    <id>http://babodx.github.com/blog/2009/12/21/rails-use-sqlite3</id>
    <content type="html"><![CDATA[<p>参考<a href="http://wiki.rubyonrails.org/rails/pages/HowtoUseSQLite">http://wiki.rubyonrails.org/rails/pages/HowtoUseSQLite</a></p>

<p><strong>安装SQLite</strong></p>

<p>SQLite 是一个轻量级的sql风格数据库.可以执行大部分sql92标准SQLite全部安装只有244kb,包括命令行客户端和DLL文件SQLite不用安装服务进程，就像Access数据库一样使用方便安装只需要2个文件</p>

<ul>
<li>SQLite DLL</span></li>
<li>SQLite command-line client for creating tables</li>
</ul>


<p>添加sqlite3.exe 和sqlite3.dll 到系统的path下，我放在了c:\windows\system32下了</p>

<p><strong>安装sqlite3-ruby.gem</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install sqlite3-rubyAttempting local installation of 'sqlite3'
</span><span class='line'>Local gem file not found: sqlite3*.gem
</span><span class='line'>Attempting remote installation of 'sqlite3'
</span><span class='line'>Select which gem to install for your platform (i386-mswin32)
</span><span class='line'>1. sqlite3-ruby 1.1.0 (mswin32)
</span><span class='line'>2. sqlite3-ruby 1.1.0 (ruby)
</span><span class='line'>3. sqlite3-ruby 1.0.1 (ruby)
</span><span class='line'>...
</span><span class='line'>&gt;</span></code></pre></td></tr></table></div></figure>


<p>选择 1 安装sqlite3-ruby 1.1.0(mswin32) 现在好像2才是sqlite3-ruby 1.1.0(mswin32),总之选择(mswin32)就对了</p>

<p><strong>安装图像管理工具</strong>（也可以不用，直接用命令行也很方便）<a href="http://sqlitebrowser.sourceforge.net/">http://sqlitebrowser.sourceforge.net/</a></p>

<p><strong>创建数据库</strong></p>

<p>进入项目所在目录，比如我的项目是testsqld:\work\testsql>sqlite db\test.db上面命令就在db目录下，创建了一个test.db数据库</p>

<p><strong>配置database.yml文件，访问test.db数据库</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>development:
</span><span class='line'>   adapter: sqlite3
</span><span class='line'>   database: db/test.db   #username: root
</span><span class='line'>   #password: 
</span><span class='line'>   #host: localhost</span></code></pre></td></tr></table></div></figure>


<p>后面如何操作，就和使用mysql数据库一样了。建立数据表可以用db:migrate来完成</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails下上传文件并且解决乱码问题]]></title>
    <link href="http://babodx.github.com/blog/2009/12/21/rails-upload-unread/"/>
    <updated>2009-12-21T00:00:00+08:00</updated>
    <id>http://babodx.github.com/blog/2009/12/21/rails-upload-unread</id>
    <content type="html"><![CDATA[<p>这个问题是我在<a href="http://www.javaeye.com/">www.javaeye.com</a>论坛上提出的，并且由mathsfan给出了解决办法</p>

<p>首先创建一个项目，叫<strong>test</strong></p>

<p>在app目录下的controllers目录下，找到<strong>test_controller.rb</strong>文件</p>

<p>添加一个upload的action</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def upload
</span><span class='line'>
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>然后在view目录下的test目录下，创建一个<strong>upload.rhtml</strong>文件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;%=form_tag({:action=&gt;'save'},:multipart=&gt;true)%&gt;
</span><span class='line'>&lt;br/&gt;upload your file:&lt;%=file_field("file","file")%&gt;
</span><span class='line'>&lt;br/&gt;
</span><span class='line'>&lt;%=submit_tag("upload")%&gt;
</span><span class='line'>&lt;%=end_form_tag%&gt;</span></code></pre></td></tr></table></div></figure>


<p>现在访问<a href="http://localhost:3000/test/upload">http://localhost:3000/test/upload</a>，应该可以看到一个上传的界面了。</p>

<p>不过还没有处理上传后的方法呢，所以还不能实现上传。因为上面的表单是提交给save这个action 的，现在还没有写呢。</p>

<p>在写save之前，先要完成一些相关的方法</p>

<p>在<strong>application.rb</strong>文件里，加入</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def uploadFile(file) #处理上传后的文件保存
</span><span class='line'>       if !file.original_filename.empty? 
</span><span class='line'>          #生成一个随机的文件名
</span><span class='line'>          @filename=getFileName(file.original_filename) 
</span><span class='line'>          #向dir目录写入文件 
</span><span class='line'>          File.open("#{RAILS_ROOT}/public/images/#{@filename}", "wb") do |f|
</span><span class='line'>           f.write(file.read) 
</span><span class='line'>          end 
</span><span class='line'>          #返回文件名称
</span><span class='line'>          return @filename 
</span><span class='line'>        end 
</span><span class='line'>end </span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def getFileName(filename) 
</span><span class='line'>#获取文件名
</span><span class='line'>  if !filename.nil? 
</span><span class='line'>     return filename 
</span><span class='line'>  end 
</span><span class='line'>end </span></code></pre></td></tr></table></div></figure>


<p>现在在<strong>test_controller.rb</strong>里写出save的action</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def save 
</span><span class='line'>  unless request.get? 
</span><span class='line'>    if filename=uploadFile(params[:file]['file']) #调用application.rb&lt;/strong&gt;里写的uploadFile对文件保存
</span><span class='line'>       render :text=&gt;filename 
</span><span class='line'>    end 
</span><span class='line'>  end 
</span><span class='line'>end </span></code></pre></td></tr></table></div></figure>


<p>文件可以正确上传到public/images下
但是中文文件名变为了乱码,但是render :text=>filename返回的名字,并不是乱码.</p>

<p> ###解决办法###</p>

<p>在ApplicationController加上：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>before_filter:set_charset 
</span><span class='line'>
</span><span class='line'>def set_charset 
</span><span class='line'>     @headers["Content-Type"]="text/html;charset=gb2312" 
</span><span class='line'>end </span></code></pre></td></tr></table></div></figure>


<p>我试验了一下，用utf8也可以正常处理,比如按照如下写法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def set_charset
</span><span class='line'>  @headers["Content-Type"]="text/html;charset=utf8" 
</span><span class='line'>end </span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails下request.raw_post的一些问题]]></title>
    <link href="http://babodx.github.com/blog/2009/12/21/rails-request/"/>
    <updated>2009-12-21T00:00:00+08:00</updated>
    <id>http://babodx.github.com/blog/2009/12/21/rails-request</id>
    <content type="html"><![CDATA[<p>我在学习Agile Web Development with Rails在第18章 Observers的例子中</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;%=text_field_tag :search%&gt;
</span><span class='line'>&lt;%=observe_field( :search,
</span><span class='line'>                  :frequency =&gt; 0.5,
</span><span class='line'>                  :update =&gt; :results,
</span><span class='line'>                  :url =&gt; {:action =&gt; :search})%&gt;</span></code></pre></td></tr></table></div></figure>


<p>将text_field_tag里面的内容，每间隔0.5就提交给search这个action,然后将结果显示在<div id="results"></div>层</p>

<p>在search方法里面可以通过request.raw_post获取提交的数据</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def search
</span><span class='line'>     render:text=&gt;request.raw_post   
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>问题是上面这样返回的内容，总是在提交的内容后多一个=号</p>

<p>比如在文本框输入div层显示的就是a=</p>

<p>后来只能通过把最后2位抹去，来达到正常效果render:text=>request.raw_post.to(request.raw_post.length-2)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails实现图片验证码]]></title>
    <link href="http://babodx.github.com/blog/2009/12/21/rails-graphical-verification-code/"/>
    <updated>2009-12-21T00:00:00+08:00</updated>
    <id>http://babodx.github.com/blog/2009/12/21/rails-graphical-verification-code</id>
    <content type="html"><![CDATA[<p>写在了babo.javaeye.com了</p>

<p><a href="http://babo.javaeye.com/blog/72298">http://babo.javaeye.com/blog/72298</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails配合fckeditor实现文本编辑工具条]]></title>
    <link href="http://babodx.github.com/blog/2009/12/21/rails-fckeditor/"/>
    <updated>2009-12-21T00:00:00+08:00</updated>
    <id>http://babodx.github.com/blog/2009/12/21/rails-fckeditor</id>
    <content type="html"><![CDATA[<p>主要参考了</p>

<p><a href="http://blog.caronsoftware.com/articles/2006/08/07/fckeditor-plugin-for-rails">http://blog.caronsoftware.com/articles/2006/08/07/fckeditor-plugin-for-rails</a></p>

<p><a href="http://www.blogjava.net/rocky/archive/2006/11/04/rails-fckeditor-integration.html">http://www.blogjava.net/rocky/archive/2006/11/04/rails-fckeditor-integration.html</a></p>

<p><strong>安装</strong></p>

<p>下载<a href="http://rubyforge.org/projects/fckeditorp/">http://rubyforge.org/projects/fckeditorp/</a>项目的 FCKEditor Plugin for Rails，将下载的文件加压缩后，保存到fckeditor文件夹中</p>

<p>将fckeditor文件夹拷贝到自己项目的vendor/plugins目录下</p>

<p>运行rack fckeditor:install</p>

<p>然后在需要用到这个插件的页面，输入<code>&lt;%= javascript_include_tag "fckeditor/fckeditor" %&gt;</code>或者将这句话添加到app/view/layouts/下的对应文件中</p>

<p><strong>使用</strong></p>

<p>需要使用这个工具条的地方，输入</p>

<p><code>&lt;%=fckeditor_textarea("post", "body", :toolbarSet =&gt; 'Simple', :width =&gt; '100%', :height =&gt; '500px' )%&gt;</code></p>

<p>注意fckeditor_textarea的一个参数post必须是action传过来的一个实体类，如果action没有传过来，就会提示出错</p>

<p>比如我这里用到了post,我的action如下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def new&lt;br&gt;
</span><span class='line'>      @post = Post.new&lt;br&gt;
</span><span class='line'>    end</span></code></pre></td></tr></table></div></figure>


<p>第二个参数，body对应表单里的字段</p>

<p>第三个参数toolbarSet=>&#8221;Simple&#8221;为工具条风格，这个风格可以在public/javascripts/fckcustom.js文件里面定义（修改后，要关闭浏览器再开才起作用）</p>

<p>第四、五个参数，代表文本区域的大小</p>

<p><strong>图片上传</strong></p>

<p>默认安装后，图片上传不能用，需要修改vendor/plugins/fckeditor/app/controllers/fckeditor_controller.rb文件的upload_file action如下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def upload_file
</span><span class='line'>      @new_file = params[:NewFile]
</span><span class='line'>      @url = upload_directory_path
</span><span class='line'>      begin
</span><span class='line'>        ftype = @new_file.content_type.strip
</span><span class='line'>        if ! MIME_TYPES.include?(ftype)
</span><span class='line'>          @errorNumber = 202
</span><span class='line'>          puts "#{ftype} is invalid MIME type"
</span><span class='line'>          raise "#{ftype} is invalid MIME type"
</span><span class='line'>        else
</span><span class='line'>          path = current_directory_path + "/" + @new_file.original_filename
</span><span class='line'>          File.open(path,"wb",0664) do |fp|
</span><span class='line'>            FileUtils.copy_stream(@new_file, fp)
</span><span class='line'>          end
</span><span class='line'>          @errorNumber = 0
</span><span class='line'>        end
</span><span class='line'>      rescue =&gt; e
</span><span class='line'>        @errorNumber = 110 if @errorNumber.nil?
</span><span class='line'>      end
</span><span class='line'>    
</span><span class='line'>      # Fix provided by Nicola Piccinini -- &lt;a href="http://superfluo.org/"&gt;http://superfluo.org&lt;/a&gt;
</span><span class='line'>      render :text =&gt; %Q'&lt;script&gt;window.parent.OnUploadCompleted(&lt;a href="mailto:#%7B@errorNumber%7D,%20%22#%7BUPLOADED+%22/%22+params%5B:Type%5D+%22/%22+@new_file.original_filename%7D%20%22);&lt;/script&gt;%20"&gt;#{@errorNumber},\"#{UPLOADED+"/"+params[:Type]+"/"+@new_file.original_filename}\");&lt;/script&gt;'&lt;/a&gt;
</span><span class='line'>    
</span><span class='line'>    end</span></code></pre></td></tr></table></div></figure>


<p>关于工具条具体某个工具怎么显示，提供那些功能，可以在public/javascripts/fckeditor/fckconfig.js文件里面定义</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何快速统计服务器访问量]]></title>
    <link href="http://babodx.github.com/blog/2009/12/21/quick-stats-server-visits/"/>
    <updated>2009-12-21T00:00:00+08:00</updated>
    <id>http://babodx.github.com/blog/2009/12/21/quick-stats-server-visits</id>
    <content type="html"><![CDATA[<p>最近看了javaeye上面<strong>robbin</strong>的一篇文章，学习到了很多知识。</p>

<p><a href="http://robbin.javaeye.com/blog/97287">http://robbin.javaeye.com/blog/97287</a> 如何快速统计RoR网站的访问量</p>

<p>我的服务器是Apache+tomcat的配置，上面跑了几个网站。都是基于apache 虚拟主机配置的。</p>

<p>apache配置如下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Include conf/vhost_*.conf</span></code></pre></td></tr></table></div></figure>


<p>然后每个虚拟主机对应一个配置文件</p>

<p>例如下面的(一些信息用???代替了，都是域名和姓名等个人信息)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;VirtualHost *:80&gt;
</span><span class='line'>    ServerAdmin ???&lt;a href="mailto:???@???.cn"&gt;@???.cn&lt;/a&gt;
</span><span class='line'>    DocumentRoot /home/???/www
</span><span class='line'>    ServerName &lt;a href="http://www./???.org"&gt;www.???.org&lt;/a&gt;
</span><span class='line'>    DirectoryIndex index.jsp index.htm
</span><span class='line'>    ErrorLog logs/abc-error_log
</span><span class='line'>    CustomLog "| /usr/sbin/rotatelogs /var/log/httpd/abc-access_%Y%m%d.log 86400" common
</span><span class='line'>    &lt;Location "/*.jsp"&gt;
</span><span class='line'>         JkUriSet worker ajp13:localhost:8009
</span><span class='line'>    &lt;/Location&gt;
</span><span class='line'>&lt;/VirtualHost&gt;</span></code></pre></td></tr></table></div></figure>


<p>这样配置后，就会在/var/log/httpd下面按照虚拟主机名字和日期，每天生成一个访问日志文件</p>

<p><strong>统计每日动态请求处理总数</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat /var/log/httpd/abc-access_20081116.log |grep "200 "|wc -l</span></code></pre></td></tr></table></div></figure>


<p><strong>统计URL的访问频度</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat /var/log/httpd/abc-access_20081116.log |grep "200 "|awk '{print $7}'|sort|uniq -c</span></code></pre></td></tr></table></div></figure>


<p><strong>统计时间访问频度</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat /var/log/httpd/abc-access_20081116.log |grep "200 "|awk '{print $4}'|awk -F : '{print $2}'|sort|uniq -c</span></code></pre></td></tr></table></div></figure>


<p><strong>以上这些是基于CentOS+apache+tomcat实现的</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@ict ~]# cat /var/log/httpd/esdinchina-access_20081117.log |grep "200 "|awk '{print $4}'|awk -F : '{print $2}'|sort|uniq -c</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个很好的开源企业内部IM解决方案]]></title>
    <link href="http://babodx.github.com/blog/2009/12/21/opensource-im/"/>
    <updated>2009-12-21T00:00:00+08:00</updated>
    <id>http://babodx.github.com/blog/2009/12/21/opensource-im</id>
    <content type="html"><![CDATA[<p>今天发现了<a href="http://www.igniterealtime.org/">http://www.igniterealtime.org</a>这个项目首页</p>

<p>这个项目可以在企业内部架设一台服务器，来完成内部IM功能。客户端可以想QQ或者MSN一样登陆。并且通过服务器上设置GATEWAY功能，还能与MSN等主流软件通讯。</p>

<p>具体功能还没有测试，不过打算有时间的时候架设下进行试用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个在windows下很好用的MySQL工具Navicat]]></title>
    <link href="http://babodx.github.com/blog/2009/12/21/navicat/"/>
    <updated>2009-12-21T00:00:00+08:00</updated>
    <id>http://babodx.github.com/blog/2009/12/21/navicat</id>
    <content type="html"><![CDATA[<p>为了解决中文乱码，我的Mysql都设置了使用utf8编码</p>

<p>这样一来，使用SQLyog Enterprise查看表里面内容，就都不能正常显示了。可能SQLyog需要设置？反正我没有搞出来。</p>

<p>不过后来我换用了Navicat 7以后，感觉很好。所有中文内容都可以正确显示</p>

<p>比mysql front也要强很多。以后我就用这个了
<img src="http://www.navicat.com/images/stories/product/mysql/product/win/win_big.jpg" alt="navicat" /></p>

<p>而且支持Linux,windows,mac三个平台。下面是介绍</p>

<p><span>PremiumSoft Navicat™ is a powerful MySQL database administration and development tool that is not only sophisticated enough for professional developers, but also easy to learn for new users. With an user-friendly GUI, Navicat™ lets you quickly and easily create, organize, access and share information in a secure and convenient way. </span>
<span>PremiumSoft Navicat supports multiple MySQL server connections which can be connected locally or remotely. Your remote MySQL server can be running on Linux, Unix, Mac OS X or Windows platform.<br></span></p>
]]></content>
  </entry>
  
</feed>
